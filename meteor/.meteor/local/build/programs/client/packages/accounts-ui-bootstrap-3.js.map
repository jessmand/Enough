)]}'
{"version":3,"file":"/packages/accounts-ui-bootstrap-3.js","sources":["accounts-ui-bootstrap-3/accounts_ui.js","accounts-ui-bootstrap-3/login_buttons.html","accounts-ui-bootstrap-3/login_buttons_single.html","accounts-ui-bootstrap-3/login_buttons_dropdown.html","accounts-ui-bootstrap-3/login_buttons_dialogs.html","accounts-ui-bootstrap-3/login_buttons_session.js","accounts-ui-bootstrap-3/login_buttons.js","accounts-ui-bootstrap-3/login_buttons_single.js","accounts-ui-bootstrap-3/login_buttons_dropdown.js","accounts-ui-bootstrap-3/login_buttons_dialogs.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iB;AACA,qB;;AAEA,4B;AACA,4B;AACA,+B;AACA,6B;AACA,M;AACA,C;;AAEA,+C;AACA,+B;AACA,kD;AACA,+B;AACA,K;AACA,C;;AAEA,wC;AACA,4B;AACA,yF;AACA,2C;AACA,yC;AACA,uE;AACA,O;;AAEA,uC;AACA,uC;AACA,wB;AACA,yC;AACA,iC;AACA,0C;AACA,4B;AACA,wB;AACA,2C;AACA,0D;AACA,uG;AACA,gB;AACA,yF;AACA,gB;AACA,8H;AACA,S;AACA,K;;AAEA,qC;AACA,qC;AACA,qE;AACA,mE;AACA,oH;AACA,mD;AACA,uG;AACA,oB;AACA,yE;AACA,a;AACA,W;AACA,2G;AACA,yF;AACA,gB;AACA,4C;AACA,0E;AACA,8D;AACA,8I;AACA,6D;AACA,6C;AACA,0E;AACA,mB;AACA,a;AACA,S;AACA,K;AACA,E;;AAEA,gD;AACA,qE;AACA,E;;;;;;;;;;;;;;;;;;;;ACvEA,kD;AACA,kB;AACA,sB;AACA,qB;AACA,wB;AACA,4D;AACA,sD;AACA,O;AACA,gC;AACA,sD;AACA,0B;AACA,oB;AACA,yC;AACA,sD;AACA,4B;AACA,sB;AACA,qD;AACA,uD;AACA,8B;AACA,wB;AACA,8G;AACA,+B;AACA,wB;AACA,yC;AACA,uD;AACA,0I;AACA,sB;AACA,6B;AACA,sB;AACA,uG;AACA,kB;AACA,2B;AACA,oB;AACA,kG;AACA,Q;AACA,I;;AAEA,0D;AACA,kB;AACA,sB;AACA,2B;AACA,mD;AACA,0B;AACA,oB;AACA,yG;AACA,2B;AACA,oB;AACA,iC;AACA,mD;AACA,0H;AACA,M;AACA,I;;AAEA,2D;AACA,kB;AACA,sB;AACA,2B;AACA,mD;AACA,0B;AACA,oB;AACA,0C;AACA,gE;AACA,4B;AACA,sB;AACA,6C;AACA,uD;AACA,8B;AACA,wB;AACA,uH;AACA,+B;AACA,wB;AACA,0D;AACA,8D;AACA,gC;AACA,0B;AACA,8C;AACA,yD;AACA,iD;AACA,4D;AACA,kC;AACA,4B;AACA,+I;AACA,mC;AACA,4B;AACA,+I;AACA,+C;AACA,0B;AACA,sB;AACA,kB;AACA,2B;AACA,oB;AACA,iC;AACA,4B;AACA,iD;AACA,M;AACA,I;;AAEA,0D;AACA,kB;AACA,sB;AACA,6B;AACA,uD;AACA,0B;AACA,oB;AACA,iC;AACA,mC;AACA,mB;AACA,6D;AACA,iB;AACA,iC;AACA,sD;AACA,0B;AACA,oB;AACA,iC;AACA,8C;AACA,mB;AACA,4D;AACA,iB;AACA,Q;AACA,I;;AAEA,2D;AACA,kB;AACA,sB;AACA,qN;AACA,I;;AAEA,kE;AACA,kB;AACA,sB;AACA,+B;AACA,mD;AACA,0B;AACA,oB;AACA,uC;AACA,sC;AACA,6B;AACA,kD;AACA,mC;AACA,gC;AACA,qB;AACA,qB;AACA,c;AACA,6B;AACA,2B;AACA,oB;AACA,uC;AACA,sC;AACA,iB;AACA,M;AACA,I;;;;;;;;;;;;;;;;;;;;ACtJA,4E;AACA,kB;AACA,sB;AACA,mB;AACA,oC;AACA,yB;AACA,gF;AACA,uD;AACA,4B;AACA,sB;AACA,6B;AACA,6B;AACA,sB;AACA,+C;AACA,U;AACA,wC;AACA,qD;AACA,O;AACA,2B;AACA,2B;AACA,8C;AACA,qD;AACA,O;AACA,oC;AACA,qD;AACA,0B;AACA,oB;AACA,sC;AACA,iE;AACA,uD;AACA,S;AACA,oC;AACA,gE;AACA,qB;AACA,2B;AACA,oB;AACA,sC;AACA,mE;AACA,uD;AACA,S;AACA,iC;AACA,gE;AACA,+B;AACA,0B;AACA,I;;AAEA,4E;AACA,kB;AACA,sB;AACA,mB;AACA,oC;AACA,yF;AACA,I;;AAEA,4E;AACA,kB;AACA,sB;AACA,mB;AACA,oC;AACA,yB;AACA,iC;AACA,6B;AACA,0D;AACA,8H;AACA,I;;;;;;;;;;;;;;;;;;;;AChEA,kE;AACA,kB;AACA,sB;AACA,kB;AACA,8B;AACA,uB;AACA,uB;AACA,+B;AACA,6B;AACA,6B;AACA,0D;AACA,2E;AACA,qC;AACA,mC;AACA,4D;AACA,0B;AACA,oB;AACA,yG;AACA,2B;AACA,oB;AACA,6C;AACA,iE;AACA,4B;AACA,sB;AACA,qH;AACA,6B;AACA,sB;AACA,8H;AACA,sB;AACA,0B;AACA,I;;AAEA,yE;AACA,kB;AACA,sB;AACA,6B;AACA,4E;AACA,0B;AACA,oB;AACA,0H;AACA,mC;AACA,gE;AACA,0B;AACA,oB;AACA,oC;AACA,2C;AACA,8C;AACA,oC;AACA,iH;AACA,I;;AAEA,mE;AACA,kB;AACA,sB;AACA,kB;AACA,8B;AACA,uB;AACA,uB;AACA,+B;AACA,6B;AACA,8C;AACA,sE;AACA,0B;AACA,oB;AACA,mB;AACA,6E;AACA,4B;AACA,iH;AACA,I;;AAEA,sE;AACA,kB;AACA,sB;AACA,6B;AACA,mD;AACA,0B;AACA,oB;AACA,2C;AACA,+D;AACA,4B;AACA,sB;AACA,mG;AACA,qC;AACA,8D;AACA,4B;AACA,sB;AACA,6C;AACA,+D;AACA,8B;AACA,wB;AACA,uI;AACA,mH;AACA,6B;AACA,sB;AACA,yH;AACA,kB;AACA,M;AACA,I;;AAEA,mF;AACA,kB;AACA,sB;AACA,+Q;AACA,I;;AAEA,0E;AACA,kB;AACA,sB;AACA,2B;AACA,+D;AACA,0B;AACA,oB;AACA,+F;AACA,2B;AACA,oB;AACA,sH;AACA,mD;AACA,4B;AACA,sB;AACA,wG;AACA,gC;AACA,2C;AACA,mC;AACA,oB;AACA,qC;AACA,yD;AACA,4B;AACA,sB;AACA,wC;AACA,6B;AACA,sB;AACA,yC;AACA,gD;AACA,wD;AACA,4B;AACA,sB;AACA,qC;AACA,iC;AACA,uC;AACA,qE;AACA,8B;AACA,wB;AACA,uC;AACA,qC;AACA,8B;AACA,6C;AACA,yC;AACA,oE;AACA,8B;AACA,wB;AACA,uC;AACA,4B;AACA,+B;AACA,2C;AACA,mC;AACA,qC;AACA,yD;AACA,4B;AACA,sB;AACA,8G;AACA,kB;AACA,M;AACA,I;;AAEA,wD;AACA,kB;AACA,sB;AACA,mB;AACA,yB;AACA,2d;AACA,I;;AAEA,iE;AACA,kB;AACA,sB;AACA,uG;AACA,I;;AAEA,2D;AACA,kB;AACA,sB;AACA,2B;AACA,kD;AACA,0B;AACA,oB;AACA,mC;AACA,kC;AACA,4D;AACA,U;AACA,wB;AACA,4D;AACA,Q;AACA,+B;AACA,6D;AACA,Q;AACA,6B;AACA,iB;AACA,M;AACA,I;;AAEA,gE;AACA,kB;AACA,sB;AACA,wG;AACA,iD;AACA,0B;AACA,oB;AACA,kG;AACA,sL;AACA,I;;;;;;;;;;;;;;;;;;;;ACjNA,oE;AACA,kB;AACA,ke;AACA,M;AACA,wJ;;AAEA,yD;AACA,kB;AACA,sB;AACA,2B;AACA,8D;AACA,0B;AACA,oB;AACA,iC;AACA,uB;AACA,8C;AACA,6B;AACA,6B;AACA,+B;AACA,8B;AACA,iC;AACA,6B;AACA,sC;AACA,qB;AACA,uB;AACA,8B;AACA,2B;AACA,qB;AACA,sB;AACA,c;AACA,oC;AACA,4B;AACA,0E;AACA,2B;AACA,qC;AACA,wC;AACA,8B;AACA,uB;AACA,iC;AACA,sI;AACA,6B;AACA,iC;AACA,iC;AACA,+C;AACA,gD;AACA,iC;AACA,+C;AACA,sN;AACA,M;AACA,I;;AAEA,yD;AACA,kB;AACA,sB;AACA,2B;AACA,8D;AACA,0B;AACA,oB;AACA,iC;AACA,uB;AACA,8C;AACA,6B;AACA,6B;AACA,+B;AACA,8B;AACA,iC;AACA,6B;AACA,sC;AACA,qB;AACA,uB;AACA,8B;AACA,2B;AACA,qB;AACA,sB;AACA,c;AACA,oC;AACA,4B;AACA,wE;AACA,2B;AACA,qC;AACA,oC;AACA,8B;AACA,uB;AACA,iC;AACA,sI;AACA,6B;AACA,iC;AACA,iC;AACA,sD;AACA,gD;AACA,iC;AACA,+C;AACA,sN;AACA,M;AACA,I;;AAEA,6D;AACA,kB;AACA,sB;AACA,2B;AACA,kD;AACA,0B;AACA,oB;AACA,iC;AACA,yD;AACA,mD;AACA,8B;AACA,wC;AACA,uC;AACA,M;AACA,I;;AAEA,iE;AACA,kB;AACA,sB;AACA,2B;AACA,kD;AACA,0B;AACA,oB;AACA,+B;AACA,8B;AACA,gD;AACA,6B;AACA,8B;AACA,iC;AACA,6B;AACA,oC;AACA,4B;AACA,wE;AACA,2B;AACA,mC;AACA,2C;AACA,yD;AACA,uC;AACA,sF;AACA,2O;AACA,gB;AACA,qC;AACA,4C;AACA,gB;AACA,qC;AACA,6E;AACA,gE;AACA,4B;AACA,sB;AACA,+H;AACA,gE;AACA,6D;AACA,W;AACA,qB;AACA,wD;AACA,qH;AACA,6D;AACA,6D;AACA,Y;AACA,oB;AACA,2F;AACA,mH;AACA,yC;AACA,uC;AACA,mF;AACA,iK;AACA,sB;AACA,iD;AACA,6F;AACA,6D;AACA,gC;AACA,0B;AACA,yC;AACA,c;AACA,+D;AACA,iG;AACA,sE;AACA,mC;AACA,iB;AACA,M;AACA,I;;AAEA,gE;AACA,kB;AACA,sB;AACA,2B;AACA,kD;AACA,0B;AACA,oB;AACA,iC;AACA,0D;AACA,wC;AACA,0G;AACA,8B;AACA,0C;AACA,uC;AACA,M;AACA,I;;;;;;;;;;;;;;;;;;;AClMA,c;AACA,oB;AACA,sB;;AAEA,6E;AACA,mB;AACA,2B;AACA,2B;AACA,wB;;AAEA,mB;AACA,kB;;AAEA,6C;AACA,yB;AACA,yB;AACA,wB;;AAEA,yC;AACA,6C;AACA,6C;AACA,I;;AAEA,oC;AACA,qC;AACA,oE;AACA,I;;AAEA,0C;;AAEA,oF;AACA,mC;AACA,+B;AACA,uB;AACA,2D;AACA,yH;;AAEA,4B;AACA,M;;AAEA,gC;AACA,2C;AACA,M;;AAEA,wB;AACA,uB;AACA,2C;AACA,M;;AAEA,gC;AACA,sC;AACA,8C;AACA,8C;AACA,2C;AACA,yC;AACA,2B;AACA,M;;AAEA,oC;AACA,sC;AACA,wC;AACA,kC;AACA,M;;AAEA,qC;AACA,yC;AACA,qC;AACA,kC;AACA,M;;AAEA,qE;AACA,yC;AACA,8C;AACA,yC;AACA,sC;AACA,M;;AAEA,qE;AACA,+D;AACA,mC;AACA,M;AACA,sE;AACA,2D;AACA,sE;AACA,iB;AACA,uC;AACA,yC;AACA,0C;AACA,M;;AAEA,gC;AACA,sC;AACA,qC;AACA,M;;AAEA,uC;AACA,2D;AACA,+D;AACA,gE;AACA,K;AACA,I;AACA,M;;;;;;;;;;;;;;;;;;ACrGA,a;AACA,gC;AACA,oC;;AAEA,sB;AACA,4D;;AAEA,mD;AACA,sC;AACA,O;;AAEA,8C;AACA,mC;AACA,mD;AACA,sC;AACA,oD;AACA,e;AACA,S;AACA,O;;AAEA,M;AACA,oC;AACA,M;;AAEA,2D;AACA,iD;AACA,M;;AAEA,2D;AACA,yD;AACA,M;;AAEA,gE;AACA,iE;AACA,kC;AACA,4B;AACA,8F;AACA,2B;AACA,M;;AAEA,sE;AACA,kD;AACA,M;;;AAGA,M;AACA,oC;AACA,M;;AAEA,oE;AACA,c;AACA,0D;AACA,iD;AACA,M;;AAEA,6D;AACA,oD;AACA,M;;;;AAIA,M;AACA,mC;AACA,M;;AAEA,8D;AACA,uD;AACA,M;;AAEA,6D;AACA,sD;AACA,M;;AAEA,M;AACA,4C;AACA,M;;AAEA,kE;AACA,iD;AACA,M;;AAEA,M;AACA,c;AACA,M;;AAEA,qD;AACA,iC;AACA,kB;AACA,sB;;AAEA,8C;AACA,qC;AACA,0B;AACA,iC;AACA,oE;AACA,0C;;AAEA,kB;AACA,M;;AAEA,0D;AACA,yC;AACA,sF;;AAEA,qE;AACA,8D;AACA,yB;AACA,wB;;AAEA,0D;AACA,sC;AACA,sC;;AAEA,+C;AACA,oB;AACA,0B;AACA,c;AACA,W;AACA,M;;AAEA,4D;AACA,8C;AACA,M;;AAEA,kD;AACA,iG;AACA,M;;AAEA,sE;AACA,M;AACA,mE;AACA,0B;AACA,kE;AACA,mC;AACA,wB;AACA,gB;AACA,4F;AACA,yB;AACA,S;AACA,M;AACA,4D;AACA,kG;AACA,wB;;AAEA,6K;;AAEA,6B;AACA,wB;AACA,gB;AACA,8D;AACA,yB;AACA,S;AACA,M;AACA,kE;AACA,mC;AACA,wB;AACA,gB;AACA,4F;AACA,yB;AACA,S;AACA,M;;AAEA,mD;AACA,iB;AACA,M;;AAEA,K;;;;;;;;;;;;;;;;;;;ACtKA,c;AACA,oB;AACA,0D;;AAEA,2D;AACA,wC;AACA,kC;AACA,0C;AACA,qC;AACA,mB;AACA,8C;AACA,iE;AACA,uB;AACA,yD;AACA,4D;AACA,gB;AACA,0E;AACA,S;AACA,Q;;AAEA,2E;;AAEA,6D;AACA,+D;AACA,0F;;AAEA,0C;AACA,K;AACA,K;;AAEA,6E;AACA,8E;AACA,I;;AAEA,kF;AACA,+B;AACA,2E;AACA,sB;AACA,Q;AACA,mC;AACA,I;;AAEA,gF;AACA,iC;AACA,yC;AACA,sD;AACA,I;AACA,M;;;;;;;;;;;;;;;;;;AC/CA,a;;AAEA,sB;AACA,4D;;AAEA,8D;AACA,mC;AACA,mC;AACA,uG;AACA,oC;AACA,U;AACA,yE;AACA,oC;AACA,6D;AACA,2B;AACA,U;AACA,0C;AACA,gD;AACA,S;AACA,O;;AAEA,wD;AACA,uB;AACA,M;;AAEA,M;AACA,wD;AACA,M;;AAEA,mD;AACA,sE;AACA,oC;AACA,gD;AACA,kE;AACA,2B;AACA,6B;AACA,S;AACA,O;;AAEA,qE;AACA,oD;AACA,M;;AAEA,8E;AACA,+D;AACA,M;;AAEA,2E;AACA,4D;AACA,M;;AAEA,yE;AACA,0D;AACA,M;;AAEA,sF;AACA,iF;AACA,kF;AACA,wF;AACA,U;AACA,iF;AACA,iC;AACA,0F;AACA,M;;;AAGA,mG;AACA,mF;AACA,M;;AAEA,M;AACA,yD;AACA,M;;AAEA,oD;AACA,qD;AACA,4B;AACA,U;;AAEA,4D;AACA,qC;AACA,iC;AACA,U;;AAEA,iE;AACA,oC;AACA,6B;AACA,U;;AAEA,+C;AACA,oC;AACA,gD;;AAEA,yE;AACA,qE;AACA,+D;AACA,qF;AACA,kF;AACA,8D;;AAEA,0D;AACA,mE;;AAEA,sF;AACA,2B;;AAEA,0D;AACA,kC;AACA,2E;AACA,oC;AACA,qE;AACA,8C;AACA,wD;AACA,sF;AACA,oB;AACA,mF;AACA,U;AACA,wD;AACA,oC;AACA,gD;;AAEA,yE;AACA,+D;AACA,qF;;AAEA,2D;AACA,kE;;AAEA,sF;AACA,2B;AACA,+B;;AAEA,0D;AACA,+B;AACA,+E;AACA,8C;AACA,wD;AACA,6F;AACA,U;AACA,iD;AACA,gD;;AAEA,qE;AACA,kJ;;AAEA,2D;AACA,mE;;AAEA,sF;AACA,2B;;AAEA,0D;AACA,2E;AACA,uD;AACA,qE;AACA,kF;AACA,mE;AACA,6F;AACA,U;AACA,yK;AACA,qC;AACA,gC;AACA,S;AACA,O;;AAEA,qE;AACA,4E;AACA,iC;AACA,yB;AACA,gB;AACA,0D;AACA,mD;AACA,yE;AACA,oD;AACA,oB;AACA,4C;AACA,a;AACA,S;AACA,M;;AAEA,0E;AACA,0D;AACA,M;;AAEA,6E;AACA,2D;AACA,M;;AAEA,sF;AACA,6D;AACA,M;;AAEA,sE;AACA,yD;AACA,M;;AAEA,+E;AACA,wC;AACA,M;;AAEA,8E;AACA,oE;AACA,M;;AAEA,gF;AACA,2D;AACA,M;;AAEA,wE;AACA,4B;AACA,2C;AACA,4C;AACA,iC;AACA,kC;AACA,wG;AACA,yD;AACA,a;AACA,Y;AACA,kC;AACA,mC;AACA,iC;AACA,+E;AACA,a;AACA,Y;AACA,+B;AACA,gC;AACA,+B;AACA,iC;AACA,4E;AACA,a;AACA,Y;AACA,kC;AACA,mC;AACA,kC;AACA,iC;AACA,4B;AACA,a;AACA,W;;AAEA,6B;AACA,kC;AACA,mC;AACA,iC;AACA,kC;AACA,yH;AACA,yD;AACA,a;AACA,Y;AACA,+B;AACA,gC;AACA,+B;AACA,iC;AACA,kC;AACA,uF;AACA,yD;AACA,a;AACA,Y;AACA,+B;AACA,2C;AACA,+B;AACA,iC;AACA,6F;AACA,a;AACA,Y;AACA,kC;AACA,mC;AACA,kC;AACA,iC;AACA,4B;AACA,a;AACA,Y;AACA,wC;AACA,2C;AACA,kC;AACA,iC;AACA,uE;AACA,4E;AACA,8C;AACA,kC;AACA,mG;AACA,yD;AACA,a;AACA,W;;AAEA,mF;;AAEA,oF;AACA,M;;AAEA,sF;AACA,+D;AACA,M;;AAEA,6E;AACA,4G;AACA,M;;AAEA,8E;AACA,uD;AACA,M;;AAEA,wF;AACA,0B;AACA,8G;AACA,iD;AACA,M;;AAEA,uF;AACA,8D;AACA,M;;AAEA,4D;AACA,wC;AACA,M;;;AAGA,M;AACA,0C;AACA,M;;AAEA,iD;AACA,mH;AACA,qC;AACA,iC;AACA,U;AACA,oE;AACA,oC;AACA,6B;AACA,S;AACA,O;;AAEA,8D;AACA,iB;AACA,sC;AACA,2C;AACA,kC;AACA,iC;AACA,4B;AACA,a;AACA,Y;AACA,kC;AACA,uC;AACA,kC;AACA,iC;AACA,4B;AACA,a;AACA,Y;AACA,wC;AACA,+C;AACA,kC;AACA,iC;AACA,uE;AACA,4E;AACA,8C;AACA,kC;AACA,qE;AACA,yD;AACA,a;AACA,W;AACA,M;;;AAGA,M;AACA,c;AACA,M;;AAEA,yC;AACA,kD;AACA,qB;AACA,wB;AACA,Y;AACA,iC;AACA,M;;AAEA,gD;AACA,kD;AACA,qB;AACA,wB;AACA,Y;AACA,oE;AACA,M;;AAEA,oC;AACA,oD;AACA,qB;AACA,Y;AACA,oB;AACA,M;;AAEA,4B;AACA,4C;;AAEA,iE;AACA,2D;AACA,iF;AACA,8E;AACA,0D;;AAEA,0B;AACA,gC;AACA,mE;AACA,uB;AACA,gB;AACA,iC;AACA,sC;AACA,kB;AACA,oC;AACA,6D;AACA,uB;AACA,gB;AACA,iC;AACA,gC;AACA,kB;AACA,8C;AACA,8F;AACA,qE;AACA,0E;AACA,uB;AACA,gB;AACA,gD;AACA,gB;AACA,wF;AACA,S;;AAEA,mF;AACA,wB;AACA,kF;AACA,oB;AACA,oD;AACA,a;AACA,W;AACA,M;;AAEA,qC;AACA,oE;AACA,M;;AAEA,6B;AACA,4C;;AAEA,gE;;AAEA,iE;AACA,gC;AACA,mE;AACA,uB;AACA,gB;AACA,4C;AACA,S;;AAEA,2D;AACA,6B;AACA,6D;AACA,uB;AACA,gB;AACA,sC;AACA,S;;AAEA,8E;AACA,0D;AACA,+D;AACA,mB;AACA,Y;AACA,wC;;AAEA,2C;AACA,mB;;AAEA,qC;AACA,6B;;AAEA,gF;AACA,8C;AACA,qE;AACA,U;;AAEA,6C;;AAEA,qE;AACA,+E;AACA,qE;AACA,uD;AACA,qD;AACA,oG;AACA,wB;AACA,oD;AACA,iB;AACA,oB;AACA,gG;AACA,a;AACA,W;;AAEA,qC;AACA,mB;;AAEA,sD;AACA,wB;AACA,kF;AACA,oB;AACA,oD;AACA,a;AACA,W;AACA,M;;AAEA,qC;AACA,4C;;AAEA,qE;AACA,wC;AACA,qC;AACA,4B;AACA,gC;AACA,0B;AACA,sF;AACA,oB;AACA,kE;AACA,e;AACA,gB;AACA,0D;AACA,S;AACA,M;;AAEA,qC;AACA,4C;;AAEA,8E;AACA,iE;;AAEA,8E;AACA,0D;AACA,+D;AACA,mB;;AAEA,2C;AACA,mB;;AAEA,wE;AACA,wB;AACA,kF;AACA,oB;AACA,oE;;AAEA,sD;AACA,8C;AACA,wD;AACA,yB;AACA,a;AACA,W;AACA,M;;AAEA,kD;AACA,8E;AACA,qE;AACA,qC;AACA,kF;AACA,8D;AACA,6C;AACA,0E;AACA,6B;AACA,a;AACA,S;AACA,oB;AACA,M;AACA,K;;;;;;;;;;;;;;;;;;;ACnjBA,c;AACA,oB;AACA,0D;;;AAGA,I;AACA,6D;AACA,sE;AACA,qE;AACA,gD;AACA,I;;AAEA,qC;AACA,gF;AACA,G;;AAEA,qC;AACA,gF;AACA,G;;AAEA,qE;AACA,qE;AACA,mE;AACA,8B;AACA,qC;AACA,wE;AACA,oC;AACA,mB;AACA,6D;AACA,oD;AACA,S;AACA,K;AACA,K;;;AAGA,I;AACA,iC;AACA,I;AACA,uD;AACA,qE;AACA,mB;AACA,G;;AAEA,wC;AACA,+D;AACA,sB;AACA,M;AACA,+D;AACA,+B;AACA,wB;AACA,M;AACA,+D;AACA,0D;AACA,kC;AACA,6D;AACA,K;AACA,K;;AAEA,mC;AACA,wC;AACA,mF;AACA,8D;AACA,a;;AAEA,2B;AACA,iE;AACA,wB;AACA,oB;AACA,4E;AACA,gB;AACA,8D;AACA,sC;AACA,iE;AACA,S;AACA,S;AACA,I;;AAEA,mE;AACA,yD;AACA,I;;;AAGA,I;AACA,iC;AACA,I;;AAEA,wC;AACA,+D;AACA,sB;AACA,M;AACA,2D;AACA,+B;AACA,wB;AACA,M;AACA,sE;AACA,0D;AACA,kC;AACA,2B;AACA,K;AACA,K;;AAEA,uD;AACA,iE;AACA,mB;AACA,I;;AAEA,mC;AACA,wC;AACA,4E;AACA,2D;AACA,a;;AAEA,2B;AACA,8D;AACA,wB;AACA,oB;AACA,4E;AACA,gB;AACA,8D;AACA,sC;AACA,+B;AACA,S;AACA,S;AACA,I;;AAEA,mE;AACA,yD;AACA,I;;;AAGA,I;AACA,qC;AACA,I;;AAEA,4C;AACA,wD;AACA,0D;AACA,K;AACA,K;;AAEA,2D;AACA,wD;AACA,I;;;AAGA,I;AACA,wC;AACA,I;;AAEA,iE;AACA,0E;AACA,sB;AACA,M;;AAEA,+C;AACA,0D;AACA,0C;AACA,K;AACA,K;;AAEA,8D;AACA,uG;AACA,4D;AACA,I;;;AAGA,I;AACA,yC;AACA,I;;AAEA,gD;AACA,kE;AACA,2E;AACA,M;AACA,6E;AACA,0E;AACA,iF;AACA,oE;AACA,4F;AACA,6B;AACA,8B;AACA,U;AACA,uD;AACA,kE;AACA,qE;AACA,gD;AACA,W;;AAEA,uC;AACA,sF;AACA,oB;AACA,mF;AACA,c;AACA,iF;AACA,W;AACA,O;AACA,M;AACA,+E;AACA,+E;AACA,0E;AACA,4C;AACA,qE;AACA,uE;AACA,0E;AACA,6B;AACA,K;AACA,K;;AAEA,qE;AACA,+D;AACA,8D;AACA,wC;AACA,sE;AACA,qC;AACA,yE;AACA,O;;AAEA,sF;AACA,I;;AAEA,mE;AACA,wD;AACA,mE;AACA,wF;AACA,gF;AACA,I;;AAEA,yC;AACA,mE;AACA,6B;AACA,I;;AAEA,2E;AACA,iC;AACA,I;;AAEA,+D;AACA,yE;AACA,I;;AAEA,0E;AACA,uC;AACA,6D;AACA,I;;AAEA,oE;AACA,8E;AACA,I;;;AAGA,gF;AACA,iC;AACA,yC;AACA,sD;AACA,I;;AAEA,M","sourcesContent":["if (!Accounts.ui)\n    Accounts.ui = {};\n\nif (!Accounts.ui._options) {\n    Accounts.ui._options = {\n        requestPermissions: {},\n        extraSignupFields: []\n    };\n}\n\nAccounts.ui.navigate = function (route, hash) {\n    // if router is iron-router\n    if(window.Router && _.isFunction(Router.go)) {\n        Router.go(route, hash);\n    }\n}\n\nAccounts.ui.config = function(options) {\n    // validate options keys\n    var VALID_KEYS = ['passwordSignupFields', 'requestPermissions', 'extraSignupFields'];\n    _.each(_.keys(options), function(key) {\n        if (!_.contains(VALID_KEYS, key))\n            throw new Error(\"Accounts.ui.config: Invalid key: \" + key);\n    });\n\n    // deal with `passwordSignupFields`\n    if (options.passwordSignupFields) {\n        if (_.contains([\n            \"USERNAME_AND_EMAIL_CONFIRM\",\n            \"USERNAME_AND_EMAIL\",\n            \"USERNAME_AND_OPTIONAL_EMAIL\",\n            \"USERNAME_ONLY\",\n            \"EMAIL_ONLY\"\n        ], options.passwordSignupFields)) {\n            if (Accounts.ui._options.passwordSignupFields)\n                throw new Error(\"Accounts.ui.config: Can't set `passwordSignupFields` more than once\");\n            else\n                Accounts.ui._options.passwordSignupFields = options.passwordSignupFields;\n        } else {\n            throw new Error(\"Accounts.ui.config: Invalid option for `passwordSignupFields`: \" + options.passwordSignupFields);\n        }\n    }\n\n    // deal with `requestPermissions`\n    if (options.requestPermissions) {\n        _.each(options.requestPermissions, function(scope, service) {\n            if (Accounts.ui._options.requestPermissions[service]) {\n                throw new Error(\"Accounts.ui.config: Can't set `requestPermissions` more than once for \" + service);\n            } else if (!(scope instanceof Array)) {\n                throw new Error(\"Accounts.ui.config: Value for `requestPermissions` must be an array\");\n            } else {\n                Accounts.ui._options.requestPermissions[service] = scope;\n            }\n        });\n        if (typeof options.extraSignupFields !== 'object' || !options.extraSignupFields instanceof Array) {\n            throw new Error(\"Accounts.ui.config: `extraSignupFields` must be an array.\");\n        } else {\n            if (options.extraSignupFields) {\n                _.each(options.extraSignupFields, function(field, index) {\n                    if (!field.fieldName || !field.fieldLabel)\n                        throw new Error(\"Accounts.ui.config: `extraSignupFields` objects must have `fieldName` and `fieldLabel` attributes.\");\n                    if (typeof field.visible === 'undefined')\n                        field.visible = true;\n                    Accounts.ui._options.extraSignupFields[index] = field;\n                });\n            }\n        }\n    }\n};\n\nAccounts.ui._passwordSignupFields = function() {\n    return Accounts.ui._options.passwordSignupFields || \"EMAIL_ONLY\";\n};\n","\nTemplate.__define__(\"_loginButtons\", (function() {\n  var self = this;\n  var template = this;\n  return [ HTML.DIV({\n    id: \"login-buttons\",\n    \"class\": [ \"login-buttons-dropdown-align-\", function() {\n      return Spacebars.mustache(self.lookup(\"align\"));\n    } ]\n  }), \"\\n  \", UI.If(function() {\n    return Spacebars.call(self.lookup(\"currentUser\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", UI.If(function() {\n      return Spacebars.call(self.lookup(\"loggingIn\"));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n      \\n      \", UI.If(function() {\n        return Spacebars.call(self.lookup(\"dropdown\"));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n        \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggingIn\")), \"\\n      \" ];\n      }), UI.block(function() {\n        var self = this;\n        return [ \"\\n        \", HTML.DIV({\n          \"class\": \"login-buttons-with-only-one-button\"\n        }, \"\\n          \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggingInSingleLoginButton\")), \"\\n        \"), \"\\n      \" ];\n      })), \"\\n    \" ];\n    }), UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggedIn\")), \"\\n    \" ];\n    })), \"\\n  \" ];\n  }), UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggedOut\")), \"\\n  \" ];\n  })) ];\n}));\n\nTemplate.__define__(\"_loginButtonsLoggedIn\", (function() {\n  var self = this;\n  var template = this;\n  return UI.If(function() {\n    return Spacebars.call(self.lookup(\"dropdown\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggedInDropdown\")), \"\\n  \" ];\n  }), UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"login-buttons-with-only-one-button\"\n    }, \"\\n      \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggedInSingleLogoutButton\")), \"\\n    \"), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"_loginButtonsLoggedOut\", (function() {\n  var self = this;\n  var template = this;\n  return UI.If(function() {\n    return Spacebars.call(self.lookup(\"services\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \" \\n    \", UI.If(function() {\n      return Spacebars.call(self.lookup(\"configurationLoaded\"));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", UI.If(function() {\n        return Spacebars.call(self.lookup(\"dropdown\"));\n      }, UI.block(function() {\n        var self = this;\n        return [ \" \\n        \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggedOutDropdown\")), \"\\n      \" ];\n      }), UI.block(function() {\n        var self = this;\n        return [ \"\\n        \", Spacebars.With(function() {\n          return Spacebars.call(self.lookup(\"singleService\"));\n        }, UI.block(function() {\n          var self = this;\n          return [ \" \\n          \", HTML.DIV({\n            \"class\": \"login-buttons-with-only-one-button\"\n          }, \"\\n            \", UI.If(function() {\n            return Spacebars.call(self.lookup(\"loggingIn\"));\n          }, UI.block(function() {\n            var self = this;\n            return [ \"\\n              \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggingInSingleLoginButton\")), \"\\n            \" ];\n          }), UI.block(function() {\n            var self = this;\n            return [ \"\\n              \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggedOutSingleLoginButton\")), \"\\n            \" ];\n          })), \"\\n          \"), \"\\n        \" ];\n        })), \"\\n      \" ];\n      })), \"\\n    \" ];\n    })), \"\\n  \" ];\n  }), UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"no-services\"\n    }, \"No login services configured\"), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"_loginButtonsMessages\", (function() {\n  var self = this;\n  var template = this;\n  return [ UI.If(function() {\n    return Spacebars.call(self.lookup(\"errorMessage\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"alert alert-danger\"\n    }, function() {\n      return Spacebars.mustache(self.lookup(\"errorMessage\"));\n    }), \"\\n  \" ];\n  })), \"\\n  \", UI.If(function() {\n    return Spacebars.call(self.lookup(\"infoMessage\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"alert alert-success no-margin\"\n    }, function() {\n      return Spacebars.mustache(self.lookup(\"infoMessage\"));\n    }), \"\\n  \" ];\n  })) ];\n}));\n\nTemplate.__define__(\"_loginButtonsLoggingIn\", (function() {\n  var self = this;\n  var template = this;\n  return [ Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggingInPadding\")), HTML.Raw('\\n  <div class=\"loading\">&nbsp;</div>\\n  '), Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggingInPadding\")) ];\n}));\n\nTemplate.__define__(\"_loginButtonsLoggingInPadding\", (function() {\n  var self = this;\n  var template = this;\n  return UI.Unless(function() {\n    return Spacebars.call(self.lookup(\"dropdown\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \\n    \", HTML.DIV({\n      \"class\": \"login-buttons-padding\"\n    }, \"\\n      \", HTML.DIV({\n      \"class\": \"login-button single-login-button\",\n      style: \"visibility: hidden;\",\n      id: \"login-buttons-logout\"\n    }, HTML.CharRef({\n      html: \"&nbsp;\",\n      str: \" \"\n    })), \"\\n    \"), \"\\n  \" ];\n  }), UI.block(function() {\n    var self = this;\n    return [ \"\\n    \\n    \", HTML.DIV({\n      \"class\": \"login-buttons-padding\"\n    }), \"\\n  \" ];\n  }));\n}));\n","\nTemplate.__define__(\"_loginButtonsLoggedOutSingleLoginButton\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    \"class\": \"login-text-and-button\"\n  }, \"\\n    \", HTML.DIV({\n    \"class\": [ \"login-button single-login-button col-sm-12 \", UI.If(function() {\n      return Spacebars.call(self.lookup(\"configured\"));\n    }, UI.block(function() {\n      var self = this;\n      return \"btn btn-info \";\n    }), UI.block(function() {\n      var self = this;\n      return \"configure-button btn btn-danger\";\n    })) ],\n    id: [ \"login-buttons-\", function() {\n      return Spacebars.mustache(self.lookup(\"name\"));\n    } ]\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"login-image\",\n    id: [ \"login-buttons-image-\", function() {\n      return Spacebars.mustache(self.lookup(\"name\"));\n    } ]\n  }), \"\\n      \", UI.If(function() {\n    return Spacebars.call(self.lookup(\"configured\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n        \", HTML.SPAN({\n      \"class\": [ \"text-besides-image sign-in-text-\", function() {\n        return Spacebars.mustache(self.lookup(\"name\"));\n      } ]\n    }, \"Sign in with \", function() {\n      return Spacebars.mustache(self.lookup(\"capitalizedName\"));\n    }), \"\\n      \" ];\n  }), UI.block(function() {\n    var self = this;\n    return [ \"\\n        \", HTML.SPAN({\n      \"class\": [ \"text-besides-image configure-text-\", function() {\n        return Spacebars.mustache(self.lookup(\"name\"));\n      } ]\n    }, \"Configure \", function() {\n      return Spacebars.mustache(self.lookup(\"capitalizedName\"));\n    }, \" Login\"), \"\\n      \" ];\n  })), \"\\n    \"), \"\\n  \");\n}));\n\nTemplate.__define__(\"_loginButtonsLoggingInSingleLoginButton\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    \"class\": \"login-text-and-button\"\n  }, \"\\n    \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggingIn\")), \"\\n  \");\n}));\n\nTemplate.__define__(\"_loginButtonsLoggedInSingleLogoutButton\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    \"class\": \"login-text-and-button\"\n  }, \"\\n    \", HTML.DIV({\n    \"class\": \"login-display-name\"\n  }, \"\\n      \", function() {\n    return Spacebars.mustache(self.lookup(\"displayName\"));\n  }, \"\\n    \"), HTML.Raw('\\n    <div class=\"login-button single-login-button\" id=\"login-buttons-logout\">Sign Out</div>\\n  '));\n}));\n","\nTemplate.__define__(\"_loginButtonsLoggedInDropdown\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.LI({\n    id: \"login-dropdown-list\",\n    \"class\": \"dropdown\"\n  }, \"\\n    \", HTML.A({\n    \"class\": \"dropdown-toggle\",\n    \"data-toggle\": \"dropdown\"\n  }, \"\\n      \", function() {\n    return Spacebars.mustache(self.lookup(\"displayName\"));\n  }, HTML.Raw('\\n      <b class=\"caret\"></b>\\n    ')), \"\\n    \", HTML.DIV({\n    \"class\": \"dropdown-menu col-sm-3\"\n  }, \"\\n      \", UI.If(function() {\n    return Spacebars.call(self.lookup(\"inMessageOnlyFlow\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n        \", Spacebars.include(self.lookupTemplate(\"_loginButtonsMessages\")), \"\\n      \" ];\n  }), UI.block(function() {\n    var self = this;\n    return [ \"\\n        \", UI.If(function() {\n      return Spacebars.call(self.lookup(\"inChangePasswordFlow\"));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n          \", Spacebars.include(self.lookupTemplate(\"_loginButtonsChangePassword\")), \"\\n        \" ];\n    }), UI.block(function() {\n      var self = this;\n      return [ \"\\n          \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggedInDropdownActions\")), \"\\n        \" ];\n    })), \"\\n      \" ];\n  })), \"\\n    \"), \"\\n  \");\n}));\n\nTemplate.__define__(\"_loginButtonsLoggedInDropdownActions\", (function() {\n  var self = this;\n  var template = this;\n  return [ UI.If(function() {\n    return Spacebars.call(self.lookup(\"additionalLoggedInDropdownActions\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.include(self.lookupTemplate(\"_loginButtonsAdditionalLoggedInDropdownActions\")), \"\\n  \" ];\n  })), \"\\n\\n  \", UI.If(function() {\n    return Spacebars.call(self.lookup(\"allowChangingPassword\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.BUTTON({\n      \"class\": \"btn btn-default btn-block\",\n      id: \"login-buttons-open-change-password\"\n    }, \"Change password\"), \"\\n  \" ];\n  })), HTML.Raw('\\n\\n  <button class=\"btn btn-block btn-primary\" id=\"login-buttons-logout\">Sign out</button>') ];\n}));\n\nTemplate.__define__(\"_loginButtonsLoggedOutDropdown\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.LI({\n    id: \"login-dropdown-list\",\n    \"class\": \"dropdown\"\n  }, \"\\n    \", HTML.A({\n    \"class\": \"dropdown-toggle\",\n    \"data-toggle\": \"dropdown\"\n  }, \"\\n      Sign In\", UI.Unless(function() {\n    return Spacebars.call(self.lookup(\"forbidClientAccountCreation\"));\n  }, UI.block(function() {\n    var self = this;\n    return \" / Up\";\n  })), HTML.Raw('\\n      <b class=\"caret\"></b>\\n    ')), \"\\n    \", HTML.DIV({\n    \"class\": \"dropdown-menu\"\n  }, \"\\n      \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggedOutAllServices\")), \"\\n    \"), \"\\n  \");\n}));\n\nTemplate.__define__(\"_loginButtonsLoggedOutAllServices\", (function() {\n  var self = this;\n  var template = this;\n  return UI.Each(function() {\n    return Spacebars.call(self.lookup(\"services\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n  \", UI.Unless(function() {\n      return Spacebars.call(self.lookup(\"hasPasswordService\"));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n    \", Spacebars.include(self.lookupTemplate(\"_loginButtonsMessages\")), \"\\n  \" ];\n    })), \"\\n    \", UI.If(function() {\n      return Spacebars.call(self.lookup(\"isPasswordService\"));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", UI.If(function() {\n        return Spacebars.call(self.lookup(\"hasOtherServices\"));\n      }, UI.block(function() {\n        var self = this;\n        return [ \" \\n        \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggedOutPasswordServiceSeparator\")), \"\\n      \" ];\n      })), \"\\n      \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggedOutPasswordService\")), \"\\n    \" ];\n    }), UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", Spacebars.include(self.lookupTemplate(\"_loginButtonsLoggedOutSingleLoginButton\")), \"\\n    \" ];\n    })), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"_loginButtonsLoggedOutPasswordServiceSeparator\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.Raw('<div class=\"or\">\\n    <span class=\"hline\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\\n    <span class=\"or-text\">or</span>\\n    <span class=\"hline\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\\n  </div>');\n}));\n\nTemplate.__define__(\"_loginButtonsLoggedOutPasswordService\", (function() {\n  var self = this;\n  var template = this;\n  return UI.If(function() {\n    return Spacebars.call(self.lookup(\"inForgotPasswordFlow\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.include(self.lookupTemplate(\"_forgotPasswordForm\")), \"\\n  \" ];\n  }), UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.include(self.lookupTemplate(\"_loginButtonsMessages\")), \"\\n    \", UI.Each(function() {\n      return Spacebars.call(self.lookup(\"fields\"));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", Spacebars.include(self.lookupTemplate(\"_loginButtonsFormField\")), \"\\n    \" ];\n    })), \"\\n    \", HTML.BUTTON({\n      \"class\": \"btn btn-primary col-sm-12\",\n      id: \"login-buttons-password\",\n      type: \"button\"\n    }, \"\\n      \", UI.If(function() {\n      return Spacebars.call(self.lookup(\"inSignupFlow\"));\n    }, UI.block(function() {\n      var self = this;\n      return \"\\n        Create\\n      \";\n    }), UI.block(function() {\n      var self = this;\n      return \"\\n        Sign in\\n      \";\n    })), \"\\n    \"), \"\\n    \", UI.If(function() {\n      return Spacebars.call(self.lookup(\"inLoginFlow\"));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", HTML.DIV({\n        id: \"login-other-options\"\n      }, \"\\n      \", UI.If(function() {\n        return Spacebars.call(self.lookup(\"showForgotPasswordLink\"));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n        \", HTML.A({\n          id: \"forgot-password-link\",\n          \"class\": \"pull-left\"\n        }, \"Forgot password?\"), \"\\n      \" ];\n      })), \"\\n      \", UI.If(function() {\n        return Spacebars.call(self.lookup(\"showCreateAccountLink\"));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n        \", HTML.A({\n          id: \"signup-link\",\n          \"class\": \"pull-right\"\n        }, \"Create account\"), \"\\n      \" ];\n      })), \"\\n      \"), \"\\n    \" ];\n    })), \"\\n    \", UI.If(function() {\n      return Spacebars.call(self.lookup(\"inSignupFlow\"));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", Spacebars.include(self.lookupTemplate(\"_loginButtonsBackToLoginLink\")), \"\\n    \" ];\n    })), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"_forgotPasswordForm\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    \"class\": \"login-form\"\n  }, \"\\n    \", Spacebars.include(self.lookupTemplate(\"_loginButtonsMessages\")), HTML.Raw('\\n    <div id=\"forgot-password-email-label-and-input\"> \\n      <input id=\"forgot-password-email\" type=\"email\" placeholder=\"E-mail\" class=\"form-control\">\\n    </div>\\n    <button class=\"btn btn-primary login-button-form-submit col-sm-12\" id=\"login-buttons-forgot-password\">Reset password</button>\\n    '), Spacebars.include(self.lookupTemplate(\"_loginButtonsBackToLoginLink\")), \"\\n  \");\n}));\n\nTemplate.__define__(\"_loginButtonsBackToLoginLink\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.Raw('<button id=\"back-to-login-link\" class=\"btn btn-default col-sm-12\">Cancel</button>');\n}));\n\nTemplate.__define__(\"_loginButtonsFormField\", (function() {\n  var self = this;\n  var template = this;\n  return UI.If(function() {\n    return Spacebars.call(self.lookup(\"visible\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.INPUT({\n      id: [ \"login-\", function() {\n        return Spacebars.mustache(self.lookup(\"fieldName\"));\n      } ],\n      type: function() {\n        return Spacebars.mustache(self.lookup(\"inputType\"));\n      },\n      placeholder: function() {\n        return Spacebars.mustache(self.lookup(\"fieldLabel\"));\n      },\n      \"class\": \"form-control\"\n    }), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"_loginButtonsChangePassword\", (function() {\n  var self = this;\n  var template = this;\n  return [ Spacebars.include(self.lookupTemplate(\"_loginButtonsMessages\")), \"\\n  \", UI.Each(function() {\n    return Spacebars.call(self.lookup(\"fields\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.include(self.lookupTemplate(\"_loginButtonsFormField\")), \"\\n  \" ];\n  })), HTML.Raw('\\n  <button class=\"btn btn-primary\" id=\"login-buttons-do-change-password\">Change password</button>\\n  <button class=\"btn btn-default login-close\">Close</button>') ];\n}));\n","\nUI.body.contentParts.push(UI.Component.extend({render: (function() {\n  var self = this;\n  return [ Spacebars.include(self.lookupTemplate(\"_resetPasswordDialog\")), \"\\n  \", Spacebars.include(self.lookupTemplate(\"_enrollAccountDialog\")), \"\\n  \", Spacebars.include(self.lookupTemplate(\"_justVerifiedEmailDialog\")), \"\\n  \", Spacebars.include(self.lookupTemplate(\"_configureLoginServiceDialog\")), HTML.Raw(\"\\n\\n  <!-- if we're not showing a dropdown, we need some other place to show messages -->\\n  \"), Spacebars.include(self.lookupTemplate(\"_loginButtonsMessagesDialog\")) ];\n})}));\nMeteor.startup(function () { if (! UI.body.INSTANTIATED) { UI.body.INSTANTIATED = true; UI.DomRange.insert(UI.render(UI.body).dom, document.body); } });\n\nTemplate.__define__(\"_resetPasswordDialog\", (function() {\n  var self = this;\n  var template = this;\n  return UI.If(function() {\n    return Spacebars.call(self.lookup(\"inResetPasswordFlow\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"modal\",\n      id: \"login-buttons-reset-password-modal\"\n    }, \"\\n      \", HTML.DIV({\n      \"class\": \"modal-dialog\"\n    }, \"\\n        \", HTML.DIV({\n      \"class\": \"modal-content\"\n    }, \"\\n          \", HTML.DIV({\n      \"class\": \"modal-header\"\n    }, \"\\n            \", HTML.BUTTON({\n      type: \"button\",\n      \"class\": \"close\",\n      \"data-dismiss\": \"modal\",\n      \"aria-hidden\": \"true\"\n    }, HTML.CharRef({\n      html: \"&times;\",\n      str: \"×\"\n    })), \"\\n            \", HTML.H4({\n      \"class\": \"modal-title\"\n    }, \"Reset your password\"), \"\\n          \"), \"\\n          \", HTML.DIV({\n      \"class\": \"modal-body\"\n    }, \"\\n            \", HTML.INPUT({\n      id: \"reset-password-new-password\",\n      \"class\": \"form-control\",\n      type: \"password\",\n      placeholder: \"New Password\"\n    }), \"\\n            \", Spacebars.include(self.lookupTemplate(\"_loginButtonsMessages\")), \"\\n          \"), \"\\n          \", HTML.DIV({\n      \"class\": \"modal-footer\"\n    }, \"\\n            \", HTML.A({\n      \"class\": \"btn btn-default\",\n      id: \"login-buttons-cancel-reset-password\"\n    }, \"Close\"), \"\\n            \", HTML.BUTTON({\n      \"class\": \"btn btn-primary\",\n      id: \"login-buttons-reset-password-button\"\n    }, \"\\n              Set password\\n            \"), \"\\n          \"), \"\\n        \"), HTML.Comment(\" /.modal-content \"), \"\\n      \"), HTML.Comment(\" /.modal-dalog \"), \"\\n    \"), HTML.Comment(\" /.modal \"), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"_enrollAccountDialog\", (function() {\n  var self = this;\n  var template = this;\n  return UI.If(function() {\n    return Spacebars.call(self.lookup(\"inEnrollAccountFlow\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"modal\",\n      id: \"login-buttons-enroll-account-modal\"\n    }, \"\\n      \", HTML.DIV({\n      \"class\": \"modal-dialog\"\n    }, \"\\n        \", HTML.DIV({\n      \"class\": \"modal-content\"\n    }, \"\\n          \", HTML.DIV({\n      \"class\": \"modal-header\"\n    }, \"\\n            \", HTML.BUTTON({\n      type: \"button\",\n      \"class\": \"close\",\n      \"data-dismiss\": \"modal\",\n      \"aria-hidden\": \"true\"\n    }, HTML.CharRef({\n      html: \"&times;\",\n      str: \"×\"\n    })), \"\\n            \", HTML.H4({\n      \"class\": \"modal-title\"\n    }, \"Choose a password\"), \"\\n          \"), \"\\n          \", HTML.DIV({\n      \"class\": \"modal-body\"\n    }, \"\\n            \", HTML.INPUT({\n      id: \"enroll-account-password\",\n      \"class\": \"form-control\",\n      type: \"password\",\n      placeholder: \"New Password\"\n    }), \"\\n            \", Spacebars.include(self.lookupTemplate(\"_loginButtonsMessages\")), \"\\n          \"), \"\\n          \", HTML.DIV({\n      \"class\": \"modal-footer\"\n    }, \"\\n            \", HTML.A({\n      \"class\": \"btn btn-default\",\n      id: \"login-buttons-cancel-enroll-account-button\"\n    }, \"Close\"), \"\\n            \", HTML.BUTTON({\n      \"class\": \"btn btn-primary\",\n      id: \"login-buttons-enroll-account-button\"\n    }, \"\\n              Set password\\n            \"), \"\\n          \"), \"\\n        \"), HTML.Comment(\" /.modal-content \"), \"\\n      \"), HTML.Comment(\" /.modal-dalog \"), \"\\n    \"), HTML.Comment(\" /.modal \"), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"_justVerifiedEmailDialog\", (function() {\n  var self = this;\n  var template = this;\n  return UI.If(function() {\n    return Spacebars.call(self.lookup(\"visible\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"accounts-dialog accounts-centered-dialog\"\n    }, \"\\n      Email verified\\n      \", HTML.DIV({\n      \"class\": \"login-button\",\n      id: \"just-verified-dismiss-button\"\n    }, \"Dismiss\"), \"\\n    \"), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"_configureLoginServiceDialog\", (function() {\n  var self = this;\n  var template = this;\n  return UI.If(function() {\n    return Spacebars.call(self.lookup(\"visible\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n  \", HTML.DIV({\n      \"class\": \"modal-dialog\",\n      id: \"configure-login-service-dialog-modal\"\n    }, \"\\n      \", HTML.DIV({\n      \"class\": \"modal-content\"\n    }, \"\\n          \", HTML.DIV({\n      \"class\": \"modal-header\"\n    }, \"\\n              \", HTML.H4({\n      \"class\": \"modal-title\"\n    }, \"Configure Service\"), \"\\n          \"), \"\\n          \", HTML.DIV({\n      \"class\": \"modal-body\"\n    }, \"\\n            \", HTML.DIV({\n      id: \"configure-login-service-dialog\",\n      \"class\": \"accounts-dialog accounts-centered-dialog\"\n    }, \"\\n              \", function() {\n      return Spacebars.makeRaw(Spacebars.mustache(self.lookup(\"configurationSteps\")));\n    }, \"\\n              \", HTML.P(\"\\n                Now, copy over some details.\\n              \"), \"\\n              \", HTML.P(\"\\n                \", HTML.TABLE(\"\\n                  \", HTML.COLGROUP(\"\\n                    \", HTML.COL({\n      span: \"1\",\n      \"class\": \"configuration_labels\"\n    }), \"\\n                    \", HTML.COL({\n      span: \"1\",\n      \"class\": \"configuration_inputs\"\n    }), \"\\n                  \"), \"\\n                  \", UI.Each(function() {\n      return Spacebars.call(self.lookup(\"configurationFields\"));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n                    \", HTML.TR(\"\\n                      \", HTML.TD(\"\\n                        \", HTML.LABEL({\n        \"for\": [ \"configure-login-service-dialog-\", function() {\n          return Spacebars.mustache(self.lookup(\"property\"));\n        } ]\n      }, function() {\n        return Spacebars.mustache(self.lookup(\"label\"));\n      }), \"\\n                      \"), \"\\n                      \", HTML.TD(\"\\n                        \", HTML.INPUT({\n        id: [ \"configure-login-service-dialog-\", function() {\n          return Spacebars.mustache(self.lookup(\"property\"));\n        } ],\n        type: \"text\"\n      }), \"\\n                      \"), \"\\n                    \"), \"\\n                  \" ];\n    })), \"\\n                \"), \"\\n              \"), \"\\n            \"), \"\\n          \"), \"\\n          \", HTML.DIV({\n      \"class\": \"modal-footer new-section\"\n    }, \"\\n                \", HTML.DIV({\n      \"class\": \"login-button btn btn-danger configure-login-service-dismiss-button\"\n    }, \"\\n                  I'll do this later\\n                \"), \"\\n                \", Spacebars.include(self.lookupTemplate(\"isolate\"), UI.block(function() {\n      var self = this;\n      return [ \"\\n                  \", HTML.DIV({\n        \"class\": [ \"login-button login-button-configure btn btn-success \", UI.If(function() {\n          return Spacebars.call(self.lookup(\"saveDisabled\"));\n        }, UI.block(function() {\n          var self = this;\n          return \"login-button-disabled\";\n        })) ],\n        id: \"configure-login-service-dialog-save-configuration\"\n      }, \"\\n                    Save Configuration\\n                  \"), \"\\n                \" ];\n    })), \"\\n              \"), \"\\n      \"), \"\\n  \"), \"\\n  \", HTML.DIV({\n      \"class\": \"modal-backdrop  in\"\n    }), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"_loginButtonsMessagesDialog\", (function() {\n  var self = this;\n  var template = this;\n  return UI.If(function() {\n    return Spacebars.call(self.lookup(\"visible\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"accounts-dialog accounts-centered-dialog\",\n      id: \"login-buttons-message-dialog\"\n    }, \"\\n      \", Spacebars.include(self.lookupTemplate(\"_loginButtonsMessages\")), \"\\n      \", HTML.DIV({\n      \"class\": \"login-button\",\n      id: \"messages-dialog-dismiss-button\"\n    }, \"Dismiss\"), \"\\n    \"), \"\\n  \" ];\n  }));\n}));\n","(function () {\n  var VALID_KEYS = [\n    'dropdownVisible',\n\n    // XXX consider replacing these with one key that has an enum for values.\n    'inSignupFlow',\n    'inForgotPasswordFlow',\n    'inChangePasswordFlow',\n    'inMessageOnlyFlow',\n\n    'errorMessage',\n    'infoMessage',\n\n    // dialogs with messages (info and error)\n    'resetPasswordToken',\n    'enrollAccountToken',\n    'justVerifiedEmail',\n\n    'configureLoginServiceDialogVisible',\n    'configureLoginServiceDialogServiceName',\n    'configureLoginServiceDialogSaveDisabled'\n  ];\n\n  var validateKey = function (key) {\n    if (!_.contains(VALID_KEYS, key))\n      throw new Error(\"Invalid key in loginButtonsSession: \" + key);\n  };\n\n  var KEY_PREFIX = \"Meteor.loginButtons.\";\n\n  // XXX we should have a better pattern for code private to a package like this one\n  Accounts._loginButtonsSession = {\n    set: function(key, value) {\n      validateKey(key);\n      if (_.contains(['errorMessage', 'infoMessage'], key))\n        throw new Error(\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\");\n\n      this._set(key, value);\n    },\n\n    _set: function(key, value) {\n      Session.set(KEY_PREFIX + key, value);\n    },\n\n    get: function(key) {\n      validateKey(key);\n      return Session.get(KEY_PREFIX + key);\n    },\n\n    closeDropdown: function () {\n      this.set('inSignupFlow', false);\n      this.set('inForgotPasswordFlow', false);\n      this.set('inChangePasswordFlow', false);\n      this.set('inMessageOnlyFlow', false);\n      this.set('dropdownVisible', false);\n      this.resetMessages();\n    },\n\n    infoMessage: function(message) {\n      this._set(\"errorMessage\", null);\n      this._set(\"infoMessage\", message);\n      this.ensureMessageVisible();\n    },\n\n    errorMessage: function(message) {\n      this._set(\"errorMessage\", message);\n      this._set(\"infoMessage\", null);\n      this.ensureMessageVisible();\n    },\n\n    // is there a visible dialog that shows messages (info and error)\n    isMessageDialogVisible: function () {\n      return this.get('resetPasswordToken') ||\n        this.get('enrollAccountToken') ||\n        this.get('justVerifiedEmail');\n    },\n\n    // ensure that somethings displaying a message (info or error) is\n    // visible.  if a dialog with messages is open, do nothing;\n    // otherwise open the dropdown.\n    //\n    // notably this doesn't matter when only displaying a single login\n    // button since then we have an explicit message dialog\n    // (_loginButtonsMessageDialog), and dropdownVisible is ignored in\n    // this case.\n    ensureMessageVisible: function () {\n      if (!this.isMessageDialogVisible())\n        this.set(\"dropdownVisible\", true);\n    },\n\n    resetMessages: function () {\n      this._set(\"errorMessage\", null);\n      this._set(\"infoMessage\", null);\n    },\n\n    configureService: function (name) {\n      this.set('configureLoginServiceDialogVisible', true);\n      this.set('configureLoginServiceDialogServiceName', name);\n      this.set('configureLoginServiceDialogSaveDisabled', true);\n    }\n  };\n}) ();","(function() {\n    if (!Accounts._loginButtons)\n        Accounts._loginButtons = {};\n\n    // for convenience\n    var loginButtonsSession = Accounts._loginButtonsSession;\n\n    UI.registerHelper(\"loginButtons\", function () {\n        return Template._loginButtons;\n    });\n\n    // shared between dropdown and single mode\n    Template._loginButtons.events({\n        'click #login-buttons-logout': function() {\n            Meteor.logout(function() {\n                loginButtonsSession.closeDropdown();\n            });\n        }\n    });\n\n    //\n    // loginButtonLoggedOut template\n    //\n\n    Template._loginButtonsLoggedOut.dropdown = function() {\n        return Accounts._loginButtons.dropdown();\n    };\n\n    Template._loginButtonsLoggedOut.services = function() {\n        return Accounts._loginButtons.getLoginServices();\n    };\n\n    Template._loginButtonsLoggedOut.singleService = function() {\n        var services = Accounts._loginButtons.getLoginServices();\n        if (services.length !== 1)\n            throw new Error(\n                \"Shouldn't be rendering this template with more than one configured service\");\n        return services[0];\n    };\n\n    Template._loginButtonsLoggedOut.configurationLoaded = function() {\n        return Accounts.loginServicesConfigured();\n    };\n\n\n    //\n    // loginButtonsLoggedIn template\n    //\n\n    // decide whether we should show a dropdown rather than a row of\n    // buttons\n    Template._loginButtonsLoggedIn.dropdown = function() {\n        return Accounts._loginButtons.dropdown();\n    };\n\n    Template._loginButtonsLoggedIn.displayName = function() {\n        return Accounts._loginButtons.displayName();\n    };\n\n\n\n    //\n    // loginButtonsMessage template\n    //\n\n    Template._loginButtonsMessages.errorMessage = function() {\n        return loginButtonsSession.get('errorMessage');\n    };\n\n    Template._loginButtonsMessages.infoMessage = function() {\n        return loginButtonsSession.get('infoMessage');\n    };\n\n    //\n    // loginButtonsLoggingInPadding template\n    //\n\n    Template._loginButtonsLoggingInPadding.dropdown = function() {\n        return Accounts._loginButtons.dropdown();\n    };\n\n    //\n    // helpers\n    //\n\n    Accounts._loginButtons.displayName = function() {\n        var user = Meteor.user();\n        if (!user)\n            return '';\n\n        if (user.profile && user.profile.name)\n            return user.profile.name;\n        if (user.username)\n            return user.username;\n        if (user.emails && user.emails[0] && user.emails[0].address)\n            return user.emails[0].address;\n\n        return '';\n    };\n\n    Accounts._loginButtons.getLoginServices = function() {\n        // First look for OAuth services.\n        var services = Package['accounts-oauth'] ? Accounts.oauth.serviceNames() : [];\n\n        // Be equally kind to all login services. This also preserves\n        // backwards-compatibility. (But maybe order should be\n        // configurable?)\n        services.sort();\n\n        // Add password, if it's there; it must come last.\n        if (this.hasPasswordService())\n            services.push('password');\n\n        return _.map(services, function(name) {\n            return {\n                name: name\n            };\n        });\n    };\n\n    Accounts._loginButtons.hasPasswordService = function() {\n        return !!Package['accounts-password'];\n    };\n\n    Accounts._loginButtons.dropdown = function() {\n        return this.hasPasswordService() || Accounts._loginButtons.getLoginServices().length > 1;\n    };\n\n    // XXX improve these. should this be in accounts-password instead?\n    //\n    // XXX these will become configurable, and will be validated on\n    // the server as well.\n    Accounts._loginButtons.validateUsername = function(username) {\n        if (username.length >= 3) {\n            return true;\n        } else {\n            loginButtonsSession.errorMessage(\"Username must be at least 3 characters long\");\n            return false;\n        }\n    };\n    Accounts._loginButtons.validateEmail = function(email) {\n        if (Accounts.ui._passwordSignupFields() === \"USERNAME_AND_OPTIONAL_EMAIL\" && email === '')\n            return true;\n\n        var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n        if (re.test(email)) {\n            return true;\n        } else {\n            loginButtonsSession.errorMessage(\"Invalid email\");\n            return false;\n        }\n    };\n    Accounts._loginButtons.validatePassword = function(password) {\n        if (password.length >= 6) {\n            return true;\n        } else {\n            loginButtonsSession.errorMessage(\"Password must be at least 6 characters long\");\n            return false;\n        }\n    };\n\n    Accounts._loginButtons.rendered = function () {\n        debugger;\n    };\n\n})();\n","(function () {\n  // for convenience\n  var loginButtonsSession = Accounts._loginButtonsSession;\n\n  Template._loginButtonsLoggedOutSingleLoginButton.events({\n    'click .login-button': function () {\n      var serviceName = this.name;\n      loginButtonsSession.resetMessages();\n      var callback = function (err) {\n        if (!err) {\n          loginButtonsSession.closeDropdown();\n        } else if (err instanceof Accounts.LoginCancelledError) {\n          // do nothing\n        } else if (err instanceof Accounts.ConfigError) {\n          loginButtonsSession.configureService(serviceName);\n        } else {\n          loginButtonsSession.errorMessage(err.reason || \"Unknown error\");\n        }\n      };\n\n      var loginWithService = Meteor[\"loginWith\" + capitalize(serviceName)];\n\n      var options = {}; // use default scope unless specified\n      if (Accounts.ui._options.requestPermissions[serviceName])\n        options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n\n      loginWithService(options, callback);\n    }\n  });\n\n  Template._loginButtonsLoggedOutSingleLoginButton.configured = function () {\n    return !!Accounts.loginServiceConfiguration.findOne({service: this.name});\n  };\n\n  Template._loginButtonsLoggedOutSingleLoginButton.capitalizedName = function () {\n    if (this.name === 'github')\n      // XXX we should allow service packages to set their capitalized name\n      return 'GitHub';\n    else\n      return capitalize(this.name);\n  };\n\n  // XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\n  var capitalize = function(str){\n    str = str == null ? '' : String(str);\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n}) ();","(function() {\n\n    // for convenience\n    var loginButtonsSession = Accounts._loginButtonsSession;\n\n    // events shared between loginButtonsLoggedOutDropdown and\n    // loginButtonsLoggedInDropdown\n    Template._loginButtons.events({\n        'click input, click label, click button, click .dropdown-menu, click .alert': function(event) {\n            event.stopPropagation();\n        },\n        'click #login-name-link, click #login-sign-in-link': function() {\n            event.stopPropagation();\n            loginButtonsSession.set('dropdownVisible', true);\n            Meteor.flush();\n        },\n        'click .login-close': function() {\n            loginButtonsSession.closeDropdown();\n        }\n    });\n\n    Template._loginButtons.toggleDropdown = function() {\n      toggleDropdown();\n    };\n\n    //\n    // loginButtonsLoggedInDropdown template and related\n    //\n\n    Template._loginButtonsLoggedInDropdown.events({\n        'click #login-buttons-open-change-password': function(event) {\n            event.stopPropagation();\n            loginButtonsSession.resetMessages();\n            loginButtonsSession.set('inChangePasswordFlow', true);\n            Meteor.flush();\n            toggleDropdown();\n        }\n    });\n\n    Template._loginButtonsLoggedInDropdown.displayName = function() {\n        return Accounts._loginButtons.displayName();\n    };\n\n    Template._loginButtonsLoggedInDropdown.inChangePasswordFlow = function() {\n        return loginButtonsSession.get('inChangePasswordFlow');\n    };\n\n    Template._loginButtonsLoggedInDropdown.inMessageOnlyFlow = function() {\n        return loginButtonsSession.get('inMessageOnlyFlow');\n    };\n\n    Template._loginButtonsLoggedInDropdown.dropdownVisible = function() {\n        return loginButtonsSession.get('dropdownVisible');\n    };\n\n    Template._loginButtonsLoggedInDropdownActions.allowChangingPassword = function() {\n        // it would be more correct to check whether the user has a password set,\n        // but in order to do that we'd have to send more data down to the client,\n        // and it'd be preferable not to send down the entire service.password document.\n        //\n        // instead we use the heuristic: if the user has a username or email set.\n        var user = Meteor.user();\n        return user.username || (user.emails && user.emails[0] && user.emails[0].address);\n    };\n\n\n    Template._loginButtonsLoggedInDropdownActions.additionalLoggedInDropdownActions = function () {\n      return Template._loginButtonsAdditionalLoggedInDropdownActions !== undefined;\n    };\n\n    //\n    // loginButtonsLoggedOutDropdown template and related\n    //\n\n    Template._loginButtonsLoggedOutDropdown.events({\n        'click #login-buttons-password': function() {\n            loginOrSignup();\n        },\n\n        'keypress #forgot-password-email': function(event) {\n            if (event.keyCode === 13)\n                forgotPassword();\n        },\n\n        'click #login-buttons-forgot-password': function(event) {\n            event.stopPropagation();\n            forgotPassword();\n        },\n\n        'click #signup-link': function(event) {\n            event.stopPropagation();\n            loginButtonsSession.resetMessages();\n\n            // store values of fields before swtiching to the signup form\n            var username = trimmedElementValueById('login-username');\n            var email = trimmedElementValueById('login-email');\n            var usernameOrEmail = trimmedElementValueById('login-username-or-email');\n            // notably not trimmed. a password could (?) start or end with a space\n            var password = elementValueById('login-password');\n\n            loginButtonsSession.set('inSignupFlow', true);\n            loginButtonsSession.set('inForgotPasswordFlow', false);\n\n            // force the ui to update so that we have the approprate fields to fill in\n            Meteor.flush();\n\n            // update new fields with appropriate defaults\n            if (username !== null)\n                document.getElementById('login-username').value = username;\n            else if (email !== null)\n                document.getElementById('login-email').value = email;\n            else if (usernameOrEmail !== null)\n                if (usernameOrEmail.indexOf('@') === -1)\n                    document.getElementById('login-username').value = usernameOrEmail;\n                else\n                    document.getElementById('login-email').value = usernameOrEmail;\n        },\n        'click #forgot-password-link': function(event) {\n            event.stopPropagation();\n            loginButtonsSession.resetMessages();\n\n            // store values of fields before swtiching to the signup form\n            var email = trimmedElementValueById('login-email');\n            var usernameOrEmail = trimmedElementValueById('login-username-or-email');\n\n            loginButtonsSession.set('inSignupFlow', false);\n            loginButtonsSession.set('inForgotPasswordFlow', true);\n\n            // force the ui to update so that we have the approprate fields to fill in\n            Meteor.flush();\n            //toggleDropdown();\n\n            // update new fields with appropriate defaults\n            if (email !== null)\n                document.getElementById('forgot-password-email').value = email;\n            else if (usernameOrEmail !== null)\n                if (usernameOrEmail.indexOf('@') !== -1)\n                    document.getElementById('forgot-password-email').value = usernameOrEmail;\n        },\n        'click #back-to-login-link': function() {\n            loginButtonsSession.resetMessages();\n\n            var username = trimmedElementValueById('login-username');\n            var email = trimmedElementValueById('login-email') || trimmedElementValueById('forgot-password-email'); // Ughh. Standardize on names?\n\n            loginButtonsSession.set('inSignupFlow', false);\n            loginButtonsSession.set('inForgotPasswordFlow', false);\n\n            // force the ui to update so that we have the approprate fields to fill in\n            Meteor.flush();\n\n            if (document.getElementById('login-username'))\n                document.getElementById('login-username').value = username;\n            if (document.getElementById('login-email'))\n                document.getElementById('login-email').value = email;\n            // \"login-password\" is preserved thanks to the preserve-inputs package\n            if (document.getElementById('login-username-or-email'))\n                document.getElementById('login-username-or-email').value = email || username;\n        },\n        'keypress #login-username, keypress #login-email, keypress #login-username-or-email, keypress #login-password, keypress #login-password-again': function(event) {\n            if (event.keyCode === 13)\n                loginOrSignup();\n        }\n    });\n\n    // additional classes that can be helpful in styling the dropdown\n    Template._loginButtonsLoggedOutDropdown.additionalClasses = function() {\n        if (!Accounts.password) {\n            return false;\n        } else {\n            if (loginButtonsSession.get('inSignupFlow')) {\n                return 'login-form-create-account';\n            } else if (loginButtonsSession.get('inForgotPasswordFlow')) {\n                return 'login-form-forgot-password';\n            } else {\n                return 'login-form-sign-in';\n            }\n        }\n    };\n\n    Template._loginButtonsLoggedOutDropdown.dropdownVisible = function() {\n        return loginButtonsSession.get('dropdownVisible');\n    };\n\n    Template._loginButtonsLoggedOutDropdown.hasPasswordService = function() {\n        return Accounts._loginButtons.hasPasswordService();\n    };\n\n    Template._loginButtonsLoggedOutDropdown.forbidClientAccountCreation = function() {\n        return Accounts._options.forbidClientAccountCreation;\n    };\n\n    Template._loginButtonsLoggedOutAllServices.services = function() {\n        return Accounts._loginButtons.getLoginServices();\n    };\n\n    Template._loginButtonsLoggedOutAllServices.isPasswordService = function() {\n        return this.name === 'password';\n    };\n\n    Template._loginButtonsLoggedOutAllServices.hasOtherServices = function() {\n        return Accounts._loginButtons.getLoginServices().length > 1;\n    };\n\n    Template._loginButtonsLoggedOutAllServices.hasPasswordService = function() {\n        return Accounts._loginButtons.hasPasswordService();\n    };\n\n    Template._loginButtonsLoggedOutPasswordService.fields = function() {\n        var loginFields = [{\n            fieldName: 'username-or-email',\n            fieldLabel: 'Username or Email',\n            visible: function() {\n                return _.contains(\n                    [\"USERNAME_AND_EMAIL_CONFIRM\", \"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\"],\n                    Accounts.ui._passwordSignupFields());\n            }\n        }, {\n            fieldName: 'username',\n            fieldLabel: 'Username',\n            visible: function() {\n                return Accounts.ui._passwordSignupFields() === \"USERNAME_ONLY\";\n            }\n        }, {\n            fieldName: 'email',\n            fieldLabel: 'Email',\n            inputType: 'email',\n            visible: function() {\n                return Accounts.ui._passwordSignupFields() === \"EMAIL_ONLY\";\n            }\n        }, {\n            fieldName: 'password',\n            fieldLabel: 'Password',\n            inputType: 'password',\n            visible: function() {\n                return true;\n            }\n        }];\n\n        var signupFields = [{\n            fieldName: 'username',\n            fieldLabel: 'Username',\n            visible: function() {\n                return _.contains(\n                    [\"USERNAME_AND_EMAIL_CONFIRM\", \"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"],\n                    Accounts.ui._passwordSignupFields());\n            }\n        }, {\n            fieldName: 'email',\n            fieldLabel: 'Email',\n            inputType: 'email',\n            visible: function() {\n                return _.contains(\n                    [\"USERNAME_AND_EMAIL_CONFIRM\", \"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\"],\n                    Accounts.ui._passwordSignupFields());\n            }\n        }, {\n            fieldName: 'email',\n            fieldLabel: 'Email (optional)',\n            inputType: 'email',\n            visible: function() {\n                return Accounts.ui._passwordSignupFields() === \"USERNAME_AND_OPTIONAL_EMAIL\";\n            }\n        }, {\n            fieldName: 'password',\n            fieldLabel: 'Password',\n            inputType: 'password',\n            visible: function() {\n                return true;\n            }\n        }, {\n            fieldName: 'password-again',\n            fieldLabel: 'Password (again)',\n            inputType: 'password',\n            visible: function() {\n                // No need to make users double-enter their password if\n                // they'll necessarily have an email set, since they can use\n                // the \"forgot password\" flow.\n                return _.contains(\n                    [\"USERNAME_AND_EMAIL_CONFIRM\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"],\n                    Accounts.ui._passwordSignupFields());\n            }\n        }];\n\n        signupFields = Accounts.ui._options.extraSignupFields.concat(signupFields);\n\n        return loginButtonsSession.get('inSignupFlow') ? signupFields : loginFields;\n    };\n\n    Template._loginButtonsLoggedOutPasswordService.inForgotPasswordFlow = function() {\n        return loginButtonsSession.get('inForgotPasswordFlow');\n    };\n\n    Template._loginButtonsLoggedOutPasswordService.inLoginFlow = function() {\n        return !loginButtonsSession.get('inSignupFlow') && !loginButtonsSession.get('inForgotPasswordFlow');\n    };\n\n    Template._loginButtonsLoggedOutPasswordService.inSignupFlow = function() {\n        return loginButtonsSession.get('inSignupFlow');\n    };\n\n    Template._loginButtonsLoggedOutPasswordService.showForgotPasswordLink = function() {\n        return _.contains(\n            [\"USERNAME_AND_EMAIL_CONFIRM\", \"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"],\n            Accounts.ui._passwordSignupFields());\n    };\n\n    Template._loginButtonsLoggedOutPasswordService.showCreateAccountLink = function() {\n        return !Accounts._options.forbidClientAccountCreation;\n    };\n\n    Template._loginButtonsFormField.inputType = function() {\n        return this.inputType || \"text\";\n    };\n\n\n    //\n    // loginButtonsChangePassword template\n    //\n\n    Template._loginButtonsChangePassword.events({\n        'keypress #login-old-password, keypress #login-password, keypress #login-password-again': function(event) {\n            if (event.keyCode === 13)\n                changePassword();\n        },\n        'click #login-buttons-do-change-password': function(event) {\n            event.stopPropagation();\n            changePassword();\n        }\n    });\n\n    Template._loginButtonsChangePassword.fields = function() {\n        return [{\n            fieldName: 'old-password',\n            fieldLabel: 'Current Password',\n            inputType: 'password',\n            visible: function() {\n                return true;\n            }\n        }, {\n            fieldName: 'password',\n            fieldLabel: 'New Password',\n            inputType: 'password',\n            visible: function() {\n                return true;\n            }\n        }, {\n            fieldName: 'password-again',\n            fieldLabel: 'New Password (again)',\n            inputType: 'password',\n            visible: function() {\n                // No need to make users double-enter their password if\n                // they'll necessarily have an email set, since they can use\n                // the \"forgot password\" flow.\n                return _.contains(\n                    [\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"],\n                    Accounts.ui._passwordSignupFields());\n            }\n        }];\n    };\n\n\n    //\n    // helpers\n    //\n\n    var elementValueById = function(id) {\n        var element = document.getElementById(id);\n        if (!element)\n            return null;\n        else\n            return element.value;\n    };\n\n    var trimmedElementValueById = function(id) {\n        var element = document.getElementById(id);\n        if (!element)\n            return null;\n        else\n            return element.value.replace(/^\\s*|\\s*$/g, \"\"); // trim;\n    };\n\n    var loginOrSignup = function() {\n        if (loginButtonsSession.get('inSignupFlow'))\n            signup();\n        else\n            login();\n    };\n\n    var login = function() {\n        loginButtonsSession.resetMessages();\n\n        var username = trimmedElementValueById('login-username');\n        var email = trimmedElementValueById('login-email');\n        var usernameOrEmail = trimmedElementValueById('login-username-or-email');\n        // notably not trimmed. a password could (?) start or end with a space\n        var password = elementValueById('login-password');\n\n        var loginSelector;\n        if (username !== null) {\n            if (!Accounts._loginButtons.validateUsername(username))\n                return;\n            else\n                loginSelector = {\n                    username: username\n                };\n        } else if (email !== null) {\n            if (!Accounts._loginButtons.validateEmail(email))\n                return;\n            else\n                loginSelector = {\n                    email: email\n                };\n        } else if (usernameOrEmail !== null) {\n            // XXX not sure how we should validate this. but this seems good enough (for now),\n            // since an email must have at least 3 characters anyways\n            if (!Accounts._loginButtons.validateUsername(usernameOrEmail))\n                return;\n            else\n                loginSelector = usernameOrEmail;\n        } else {\n            throw new Error(\"Unexpected -- no element to use as a login user selector\");\n        }\n\n        Meteor.loginWithPassword(loginSelector, password, function(error, result) {\n            if (error) {\n                loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n            } else {\n                loginButtonsSession.closeDropdown();\n            }\n        });\n    };\n\n    var toggleDropdown = function() {\n        $('#login-dropdown-list .dropdown-menu').dropdown('toggle');\n    };\n\n    var signup = function() {\n        loginButtonsSession.resetMessages();\n\n        var options = {}; // to be passed to Accounts.createUser\n\n        var username = trimmedElementValueById('login-username');\n        if (username !== null) {\n            if (!Accounts._loginButtons.validateUsername(username))\n                return;\n            else\n                options.username = username;\n        }\n\n        var email = trimmedElementValueById('login-email');\n        if (email !== null) {\n            if (!Accounts._loginButtons.validateEmail(email))\n                return;\n            else\n                options.email = email;\n        }\n\n        // notably not trimmed. a password could (?) start or end with a space\n        var password = elementValueById('login-password');\n        if (!Accounts._loginButtons.validatePassword(password))\n            return;\n        else\n            options.password = password;\n\n        if (!matchPasswordAgainIfPresent())\n            return;\n\n        // prepare the profile object\n        options.profile = {};\n\n        // define a proxy function to allow extraSignupFields set error messages\n        var errorFn = function(errorMessage) {\n            Accounts._loginButtonsSession.errorMessage(errorMessage);\n        };\n\n        var invalidExtraSignupFields = false;\n\n        // parse extraSignupFields to populate account's profile data\n        _.each(Accounts.ui._options.extraSignupFields, function(field, index) {\n            var value = elementValueById('login-' + field.fieldName);\n            if (typeof field.validate === 'function') {\n                if (field.validate(value, errorFn)) {\n                    options.profile[field.fieldName] = elementValueById('login-' + field.fieldName);\n                } else {\n                    invalidExtraSignupFields = true;\n                }\n            } else {\n                options.profile[field.fieldName] = elementValueById('login-' + field.fieldName);\n            }\n        });\n\n        if (invalidExtraSignupFields)\n            return;\n\n        Accounts.createUser(options, function(error) {\n            if (error) {\n                loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n            } else {\n                loginButtonsSession.closeDropdown();\n            }\n        });\n    };\n\n    var forgotPassword = function() {\n        loginButtonsSession.resetMessages();\n\n        var email = trimmedElementValueById(\"forgot-password-email\");\n        if (email.indexOf('@') !== -1) {\n            Accounts.forgotPassword({\n                email: email\n            }, function(error) {\n                if (error)\n                    loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n                else\n                    loginButtonsSession.infoMessage(\"Email sent\");\n            });\n        } else {\n            loginButtonsSession.infoMessage(\"Email sent\");\n        }\n    };\n\n    var changePassword = function() {\n        loginButtonsSession.resetMessages();\n\n        // notably not trimmed. a password could (?) start or end with a space\n        var oldPassword = elementValueById('login-old-password');\n\n        // notably not trimmed. a password could (?) start or end with a space\n        var password = elementValueById('login-password');\n        if (!Accounts._loginButtons.validatePassword(password))\n            return;\n\n        if (!matchPasswordAgainIfPresent())\n            return;\n\n        Accounts.changePassword(oldPassword, password, function(error) {\n            if (error) {\n                loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n            } else {\n                loginButtonsSession.infoMessage(\"Password changed\");\n\n                // wait 3 seconds, then expire the msg\n                Meteor.setTimeout(function() {\n                    loginButtonsSession.resetMessages();\n                }, 3000);\n            }\n        });\n    };\n\n    var matchPasswordAgainIfPresent = function() {\n        // notably not trimmed. a password could (?) start or end with a space\n        var passwordAgain = elementValueById('login-password-again');\n        if (passwordAgain !== null) {\n            // notably not trimmed. a password could (?) start or end with a space\n            var password = elementValueById('login-password');\n            if (password !== passwordAgain) {\n                loginButtonsSession.errorMessage(\"Passwords don't match\");\n                return false;\n            }\n        }\n        return true;\n    };\n})();\n","(function () {\n  // for convenience\n  var loginButtonsSession = Accounts._loginButtonsSession;\n\n\n  //\n  // populate the session so that the appropriate dialogs are\n  // displayed by reading variables set by accounts-urls, which parses\n  // special URLs. since accounts-ui depends on accounts-urls, we are\n  // guaranteed to have these set at this point.\n  //\n\n  if (Accounts._resetPasswordToken) {\n    loginButtonsSession.set('resetPasswordToken', Accounts._resetPasswordToken);\n  }\n\n  if (Accounts._enrollAccountToken) {\n    loginButtonsSession.set('enrollAccountToken', Accounts._enrollAccountToken);\n  }\n\n  // Needs to be in Meteor.startup because of a package loading order\n  // issue. We can't be sure that accounts-password is loaded earlier\n  // than accounts-ui so Accounts.verifyEmail might not be defined.\n  Meteor.startup(function () {\n    if (Accounts._verifyEmailToken) {\n      Accounts.verifyEmail(Accounts._verifyEmailToken, function(error) {\n        Accounts._enableAutoLogin();\n        if (!error)\n          loginButtonsSession.set('justVerifiedEmail', true);\n        // XXX show something if there was an error.\n      });\n    }\n  });\n\n\n  //\n  // resetPasswordDialog template\n  //\n  Template._resetPasswordDialog.rendered = function() {\n    var $modal = $(this.find('#login-buttons-reset-password-modal'));\n    $modal.modal();\n  }\n\n  Template._resetPasswordDialog.events({\n    'click #login-buttons-reset-password-button': function () {\n      resetPassword();\n    },\n    'keypress #reset-password-new-password': function (event) {\n      if (event.keyCode === 13)\n        resetPassword();\n    },\n    'click #login-buttons-cancel-reset-password': function () {\n      loginButtonsSession.set('resetPasswordToken', null);\n      Accounts._enableAutoLogin();\n      $('#login-buttons-reset-password-modal').modal(\"hide\");\n    }\n  });\n\n  var resetPassword = function () {\n    loginButtonsSession.resetMessages();\n    var newPassword = document.getElementById('reset-password-new-password').value;\n    if (!Accounts._loginButtons.validatePassword(newPassword))\n      return;\n\n    Accounts.resetPassword(\n      loginButtonsSession.get('resetPasswordToken'), newPassword,\n      function (error) {\n        if (error) {\n          loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n        } else {\n          loginButtonsSession.set('resetPasswordToken', null);\n          Accounts._enableAutoLogin();\n          $('#login-buttons-reset-password-modal').modal(\"hide\");\n        }\n      });\n  };\n\n  Template._resetPasswordDialog.inResetPasswordFlow = function () {\n    return loginButtonsSession.get('resetPasswordToken');\n  };\n\n\n  //\n  // enrollAccountDialog template\n  //\n\n  Template._enrollAccountDialog.events({\n    'click #login-buttons-enroll-account-button': function () {\n      enrollAccount();\n    },\n    'keypress #enroll-account-password': function (event) {\n      if (event.keyCode === 13)\n        enrollAccount();\n    },\n    'click #login-buttons-cancel-enroll-account-button': function () {\n      loginButtonsSession.set('enrollAccountToken', null);\n      Accounts._enableAutoLogin();\n      $modal.modal(\"hide\");\n    }\n  });\n\n  Template._enrollAccountDialog.rendered = function() {\n    $modal = $(this.find('#login-buttons-enroll-account-modal'));\n    $modal.modal();\n  };\n\n  var enrollAccount = function () {\n    loginButtonsSession.resetMessages();\n    var password = document.getElementById('enroll-account-password').value;\n    if (!Accounts._loginButtons.validatePassword(password))\n      return;\n\n    Accounts.resetPassword(\n      loginButtonsSession.get('enrollAccountToken'), password,\n      function (error) {\n        if (error) {\n          loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n        } else {\n          loginButtonsSession.set('enrollAccountToken', null);\n          Accounts._enableAutoLogin();\n          $modal.modal(\"hide\");\n        }\n      });\n  };\n\n  Template._enrollAccountDialog.inEnrollAccountFlow = function () {\n    return loginButtonsSession.get('enrollAccountToken');\n  };\n\n\n  //\n  // justVerifiedEmailDialog template\n  //\n\n  Template._justVerifiedEmailDialog.events({\n    'click #just-verified-dismiss-button': function () {\n      loginButtonsSession.set('justVerifiedEmail', false);\n    }\n  });\n\n  Template._justVerifiedEmailDialog.visible = function () {\n    return loginButtonsSession.get('justVerifiedEmail');\n  };\n\n\n  //\n  // loginButtonsMessagesDialog template\n  //\n\n  // Template._loginButtonsMessagesDialog.rendered = function() {\n  //   var $modal = $(this.find('#configure-login-service-dialog-modal'));\n  //   $modal.modal();\n  // }\n\n  Template._loginButtonsMessagesDialog.events({\n    'click #messages-dialog-dismiss-button': function () {\n      loginButtonsSession.resetMessages();\n    }\n  });\n\n  Template._loginButtonsMessagesDialog.visible = function () {\n    var hasMessage = loginButtonsSession.get('infoMessage') || loginButtonsSession.get('errorMessage');\n    return !Accounts._loginButtons.dropdown() && hasMessage;\n  };\n\n\n  //\n  // configureLoginServiceDialog template\n  //\n\n  Template._configureLoginServiceDialog.events({\n    'click .configure-login-service-dismiss-button': function () {\n      loginButtonsSession.set('configureLoginServiceDialogVisible', false);\n    },\n    'click #configure-login-service-dialog-save-configuration': function () {\n      if (loginButtonsSession.get('configureLoginServiceDialogVisible') &&\n          ! loginButtonsSession.get('configureLoginServiceDialogSaveDisabled')) {\n        // Prepare the configuration document for this login service\n        var serviceName = loginButtonsSession.get('configureLoginServiceDialogServiceName');\n        var configuration = {\n          service: serviceName\n        };\n        _.each(configurationFields(), function(field) {\n          configuration[field.property] = document.getElementById(\n            'configure-login-service-dialog-' + field.property).value\n            .replace(/^\\s*|\\s*$/g, \"\"); // trim;\n        });\n\n        // Configure this login service\n        Meteor.call(\"configureLoginService\", configuration, function (error, result) {\n          if (error)\n            Meteor._debug(\"Error configuring login service \" + serviceName, error);\n          else\n            loginButtonsSession.set('configureLoginServiceDialogVisible', false);\n        });\n      }\n    },\n    // IE8 doesn't support the 'input' event, so we'll run this on the keyup as\n    // well. (Keeping the 'input' event means that this also fires when you use\n    // the mouse to change the contents of the field, eg 'Cut' menu item.)\n    'input, keyup input': function (event) {\n      // if the event fired on one of the configuration input fields,\n      // check whether we should enable the 'save configuration' button\n      if (event.target.id.indexOf('configure-login-service-dialog') === 0)\n        updateSaveDisabled();\n    }\n  });\n\n  // check whether the 'save configuration' button should be enabled.\n  // this is a really strange way to implement this and a Forms\n  // Abstraction would make all of this reactive, and simpler.\n  var updateSaveDisabled = function () {\n    var anyFieldEmpty = _.any(configurationFields(), function(field) {\n      return document.getElementById(\n        'configure-login-service-dialog-' + field.property).value === '';\n    });\n\n    loginButtonsSession.set('configureLoginServiceDialogSaveDisabled', anyFieldEmpty);\n  };\n\n  // Returns the appropriate template for this login service.  This\n  // template should be defined in the service's package\n  var configureLoginServiceDialogTemplateForService = function () {\n    var serviceName = loginButtonsSession.get('configureLoginServiceDialogServiceName');\n    return Template['configureLoginServiceDialogFor' + capitalize(serviceName)];\n  };\n\n  var configurationFields = function () {\n    var template = configureLoginServiceDialogTemplateForService();\n    return template.fields();\n  };\n\n  Template._configureLoginServiceDialog.configurationFields = function () {\n    return configurationFields();\n  };\n\n  Template._configureLoginServiceDialog.visible = function () {\n    return loginButtonsSession.get('configureLoginServiceDialogVisible');\n  };\n\n  Template._configureLoginServiceDialog.configurationSteps = function () {\n    // renders the appropriate template\n    return configureLoginServiceDialogTemplateForService()();\n  };\n\n  Template._configureLoginServiceDialog.saveDisabled = function () {\n    return loginButtonsSession.get('configureLoginServiceDialogSaveDisabled');\n  };\n\n\n  // XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\n  var capitalize = function(str){\n    str = str == null ? '' : String(str);\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n\n}) ();\n"]}