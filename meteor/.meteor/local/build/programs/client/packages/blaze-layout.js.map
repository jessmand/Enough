)]}'
{"version":3,"file":"/packages/blaze-layout.js","sources":["blaze-layout/layout.js","blaze-layout/overrides.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+C;AACA,kC;AACA,e;AACA,c;AACA,G;AACA,yE;AACA,6C;;AAEA,sB;;AAEA,0B;AACA,iB;AACA,W;;AAEA,2B;AACA,yC;AACA,8F;AACA,E;;AAEA,+E;AACA,sB;AACA,G;AACA,8E;AACA,6E;AACA,gF;AACA,+E;AACA,uB;AACA,+E;AACA,iD;AACA,gB;AACA,wC;AACA,kB;AACA,uB;AACA,G;AACA,c;AACA,E;;AAEA,wC;AACA,6C;AACA,gB;AACA,4C;AACA,qC;AACA,gB;AACA,E;AACA,+E;AACA,0B;AACA,+E;;AAEA,G;AACA,0B;AACA,E;AACA,4D;AACA,E;AACA,+E;AACA,wB;AACA,E;AACA,gE;AACA,gF;AACA,kD;AACA,G;AACA,sC;AACA,yC;AACA,kB;AACA,W;AACA,a;AACA,0D;;AAEA,Y;AACA,2E;;AAEA,oC;AACA,yC;AACA,0D;AACA,wB;AACA,qC;AACA,4B;AACA,gD;;AAEA,mE;AACA,mC;AACA,8D;AACA,uC;AACA,2C;AACA,K;AACA,sB;AACA,iB;AACA,U;AACA,qH;AACA,G;AACA,C;;AAEA,8B;AACA,iB;;AAEA,qB;AACA,oB;;AAEA,sB;;AAEA,6C;AACA,uE;AACA,O;;AAEA,sC;;AAEA,iC;AACA,oE;AACA,sC;AACA,mD;AACA,iC;;AAEA,gD;AACA,4D;AACA,iD;AACA,iE;;AAEA,O;AACA,sB;AACA,M;;AAEA,sC;AACA,yC;;AAEA,8C;AACA,+C;AACA,8C;AACA,gD;AACA,yB;AACA,4D;AACA,mE;AACA,mB;AACA,8C;AACA,mC;AACA,Q;AACA,yC;AACA,uB;AACA,4B;AACA,S;AACA,c;AACA,yB;AACA,iD;AACA,6B;AACA,oB;AACA,O;AACA,M;;AAEA,iD;AACA,2B;AACA,uB;AACA,kB;AACA,O;;AAEA,qC;AACA,4B;AACA,uC;AACA,qB;AACA,0B;AACA,O;AACA,M;;AAEA,gC;AACA,2B;AACA,M;;AAEA,6B;AACA,4B;AACA,M;;AAEA,O;AACA,6B;AACA,M;AACA,mD;AACA,iD;AACA,M;AACA,O;AACA,4C;AACA,iC;AACA,oB;AACA,qB;AACA,8C;AACA,qB;AACA,O;;AAEA,8B;AACA,M;;AAEA,mB;AACA,sC;AACA,kC;AACA,M;;AAEA,mB;AACA,uC;AACA,6B;AACA,M;;AAEA,qD;AACA,sC;AACA,yB;AACA,wB;;AAEA,wE;AACA,mB;;AAEA,6B;AACA,wB;AACA,kC;AACA,yC;AACA,Y;AACA,0B;;AAEA,6B;;AAEA,sD;AACA,e;AACA,iC;AACA,kC;AACA,U;AACA,Q;;AAEA,2B;AACA,wB;AACA,iC;;AAEA,uD;AACA,6D;AACA,gE;AACA,sC;AACA,4B;AACA,wC;AACA,kC;AACA,yC;;AAEA,mB;AACA,qD;AACA,kD;AACA,2B;AACA,W;AACA,c;AACA,wB;AACA,U;AACA,O;AACA,O;;AAEA,+E;AACA,mE;AACA,8E;AACA,8E;AACA,6E;AACA,+B;AACA,2C;AACA,yB;AACA,wB;AACA,wE;;AAEA,mB;;AAEA,6B;AACA,wB;AACA,kC;AACA,+B;;AAEA,6B;;AAEA,oB;AACA,mH;AACA,Q;;AAEA,2B;AACA,wB;AACA,iC;;AAEA,kE;;AAEA,4C;AACA,+C;AACA,S;;AAEA,uE;AACA,+C;AACA,uD;;AAEA,8E;AACA,gF;AACA,wC;AACA,yC;;AAEA,8E;AACA,oB;AACA,O;AACA,O;;AAEA,uC;AACA,mC;AACA,oD;AACA,S;AACA,M;AACA,I;;AAEA,uB;AACA,oB;AACA,6C;AACA,8C;AACA,gC;AACA,wB;AACA,iB;AACA,qC;;AAEA,qD;AACA,6C;AACA,wC;AACA,mC;AACA,0B;AACA,uD;AACA,2B;AACA,mD;AACA,yD;AACA,8D;AACA,+D;AACA,2D;AACA,yC;AACA,+C;AACA,oD;AACA,2C;AACA,yB;AACA,wB;AACA,oC;AACA,oB;AACA,O;AACA,Y;AACA,6B;AACA,O;AACA,M;AACA,G;AACA,G;;AAEA,G;AACA,+C;AACA,kB;AACA,kC;AACA,gB;AACA,c;AACA,G;AACA,yB;;AAEA,oC;AACA,kB;AACA,uB;AACA,yB;;AAEA,U;AACA,gB;AACA,kB;AACA,oB;AACA,c;AACA,a;AACA,wB;AACA,gC;AACA,4B;AACA,8D;AACA,O;AACA,M;AACA,K;;AAEA,4D;AACA,uB;AACA,6B;AACA,wB;AACA,6D;AACA,Q;AACA,0D;AACA,I;AACA,E;;AAEA,4B;AACA,6C;AACA,wF;AACA,2B;AACA,I;;AAEA,wD;AACA,4F;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;AC/XA,mF;;AAEA,6C;AACA,gB;AACA,wC;AACA,kB;AACA,uB;AACA,G;AACA,c;AACA,E;;AAEA,oC;AACA,6C;AACA,gB;AACA,4C;AACA,qC;AACA,gB;AACA,E;;AAEA,iD;AACA,gB;AACA,2B;AACA,kB;AACA,uB;AACA,G;AACA,c;AACA,E;;AAEA,+D;AACA,+C;AACA,gB;AACA,4B;AACA,0C;AACA,oB;;AAEA,kE;AACA,iE;AACA,yE;AACA,oC;AACA,oB;AACA,K;AACA,uB;AACA,G;AACA,c;AACA,E;;AAEA,+D;AACA,mB;AACA,qC;AACA,2C;AACA,kB;AACA,mB;AACA,E;AACA,uB;AACA,gH;AACA,mC;AACA,qD;AACA,gB;AACA,yF;AACA,U;AACA,0B;AACA,K;;AAEA,8C;AACA,qC;AACA,8E;AACA,sB;AACA,I;AACA,U;AACA,6C;AACA,G;AACA,E;AACA,oE;AACA,8E;AACA,oE;AACA,wE;AACA,qC;AACA,wC;AACA,gE;AACA,M;AACA,U;AACA,kB;AACA,I;AACA,E;;AAEA,qD;AACA,mD;AACA,uB;AACA,qD;AACA,gB;AACA,yF;AACA,U;AACA,wB;AACA,K;AACA,U;AACA,qD;AACA,G;AACA,E;;AAEA,6B;AACA,2C;AACA,iC;AACA,K;AACA,C","sourcesContent":["//XXX Infinite loop issue in this circumstance:\n// {{#Layout template=\"MyLayout\"}}\n//  {{> yield}}\n// {{/Layout}}\n// \n// because content does a yield lookup for the main region, which in turn\n// yields, which results in a stack overflow.\n\nvar isLogging = false;\n\nvar log = function (msg) {\n  if (!isLogging)\n    return;\n\n  if (arguments.length > 1)\n    msg = _.toArray(arguments).join(' ');\n  console.log('%c<BlazeLayout> ' + msg, 'color: green; font-weight: bold; font-size: 1.3em;');\n};\n\n/*****************************************************************************/\n/* Meteor Functions */\n/* \n * These are copied from Core because we need to throw an error at lookup time\n * if a template is not found. The Component.lookup method does not give us a\n * way to do that. We should construct a proper pull request and send to Meteor.\n * Probably the ability to pass a not found callback or something to the lookup\n * method as an option.\n/*****************************************************************************/\nvar findComponentWithProp = function (id, comp) {\n  while (comp) {\n    if (typeof comp[id] !== 'undefined')\n      return comp;\n    comp = comp.parent;\n  }\n  return null;\n};\n\nvar getComponentData = function (comp) {\n  comp = findComponentWithProp('data', comp);\n  return (comp ?\n          (typeof comp.data === 'function' ?\n           comp.data() : comp.data) :\n          null);\n};\n/*****************************************************************************/\n/* End Meteor Functions */\n/*****************************************************************************/\n\n/**\n * Find a template object.\n *\n * Similar to Component.lookupTemplate with two differences:\n *\n * 1. Throw an error if we can't find the template. This is useful in debugging\n * vs. silently failing.\n *\n * 2. If the template is a property on the component, don't call\n * getComponentData(self), thereby creating an unnecessary data dependency. This\n * was initially causing problems with {{> yield}}\n */\nvar lookupTemplate = function (name) {\n  // self should be an instance of Layout\n  var self = this;\n  var comp;\n  var result;\n  var contentBlocksByRegion = self._contentBlocksByRegion;\n\n  if (!name)\n    throw new Error(\"BlazeLayout: You must pass a name to lookupTemplate\");\n\n  if (contentBlocksByRegion[name]) {\n    result = contentBlocksByRegion[name];\n  } else if ((comp = findComponentWithProp(name, self))) {\n    result = comp[name];\n  } else if (_.has(Template, name)) {\n    result = Template[name];\n  } else if (result = UI._globalHelper(name)) {}\n\n  if (typeof result === 'function' && !result._isEmboxedConstant) {\n    return function (/* args */ ) {\n      // modified from Core to call function in context of the\n      // component, not a data context.\n      return result.apply(self, arguments);\n    }\n  } else if (result) {\n    return result\n  } else {\n    throw new Error(\"BlazeLayout: Sorry, couldn't find a template named \" + name + \". Are you sure you defined it?\");\n  }\n}\n\nLayout = UI.Component.extend({\n  kind: 'Layout',\n\n  init: function () {\n    var self = this;\n\n    var layout = this;\n\n    var tmpl = Deps.nonreactive(function () {\n      return self.get('template') || self.template || '_defaultLayout';\n    });\n\n    var tmplDep = new Deps.Dependency;\n\n    // get the initial data value\n    var data = Deps.nonreactive(function () { return self.get(); });\n    var dataDep = new Deps.Dependency;\n    var regions = this._regions = new ReactiveDict;\n    var content = this.__content;\n\n    // a place to put content defined like this:\n    // {{#contentFor region=\"footer\"}}content{{/contentFor}}\n    // this will be searched in the lookup chain.\n    var contentBlocksByRegion = this._contentBlocksByRegion = {};\n\n    /**\n    * instance methods\n    */\n\n    this.template = function (value) {\n      if (typeof value !== 'undefined') {\n\n        // make sure we convert false and null\n        // values to the _defaultLayout so when\n        // we compare to our existing template\n        // we don't re-render the default layout\n        // unnecessarily.\n        // XXX this is a problem becuase this _defaultLayout\n        // will never get found becuase it's a helper on the layout\n        // instance\n        if (value === false || value === null)\n          value = '_defaultLayout';\n        \n        if (!EJSON.equals(value, tmpl)) {\n          tmpl = value;\n          tmplDep.changed();\n        }\n      } else {\n        tmplDep.depend();\n        //XXX changed to just return tmpl instead\n        //of a _defaultLayout\n        return tmpl;\n      }\n    };\n\n    var emboxedData = UI.emboxValue(function () {\n      log('return data()');\n      dataDep.depend();\n      return data;\n    });\n\n    this.setData = function (value) {\n      log('setData', value);\n      if (!EJSON.equals(value, data)) {\n        data = value;\n        dataDep.changed();\n      }\n    };\n\n    this.getData = function () {\n      return emboxedData();\n    };\n\n    this.data = function () {\n      return self.getData();\n    };\n\n    /**\n     * Set a region template.\n     *\n     * If you want to get the template for a region\n     * you need to call this._regions.get('key');\n     *\n     */\n    this.setRegion = function (key, value) {\n      if (arguments.length < 2) {\n        value = key;\n        key = 'main';\n      } else if (typeof key === 'undefined') {\n        key = 'main';\n      }\n\n      regions.set(key, value);\n    };\n\n    //TODO add test\n    this.getRegionKeys = function () {\n      return _.keys(regions.keys);\n    };\n\n    //TODO add test\n    this.clearRegion = function (key) {\n      regions.set(key, null);\n    };\n\n    // define a yield region to render templates into\n    this.yield = UI.Component.extend({\n      init: function () {\n        var self = this;\n\n        var data = Deps.nonreactive(function () { return self.get(); });\n        var region;\n\n        if (_.isString(data))\n          region = data;\n        else if (_.isObject(data))\n          region = data.region || 'main';\n        else\n          region = 'main';\n\n        self.region = region;\n\n        // reset the data function to use the layout's\n        // data\n        this.data = function () {\n          return layout.getData();\n        };\n      },\n\n      render: function () {\n        var self = this;\n        var region = self.region;\n\n        // returning a function tells UI.materialize to\n        // create a computation. then, if the region template\n        // changes, this comp will be rerun and the new template\n        // will get put on the screen.\n        return function () {\n          var regions = layout._regions;\n          // create a reactive dep\n          var tmpl = regions.get(region);\n\n          if (tmpl)\n            return lookupTemplate.call(layout, tmpl);\n          else if (region === 'main' && content) {\n            return content;\n          }\n          else\n            return null;\n        };\n      }\n    });\n\n    // render content into a yield region using markup. when you call setRegion\n    // manually, you specify a string, not a content block. And the\n    // lookupTemplate method uses this string name to find the template. Since\n    // contentFor creates anonymous content we need a way to add this into the\n    // lookup chain. But then we need to destroy it if it's not used anymore.\n    // not sure how to do this.\n    this.contentFor = UI.Component.extend({\n      init: function () {\n        var self = this;\n        var data = Deps.nonreactive(function () { return self.get(); });\n\n        var region;\n\n        if (_.isString(data))\n          region = data;\n        else if (_.isObject(data))\n          region = data.region;\n\n        self.region = region;\n\n        if (!region)\n          throw new Error(\"{{#contentFor}} requires a region argument like this: {{#contentFor region='footer'}}\");\n      },\n\n      render: function () {\n        var self = this;\n        var region = self.region;\n\n        var contentBlocksByRegion = layout._contentBlocksByRegion;\n\n        if (contentBlocksByRegion[region]) {\n          delete contentBlocksByRegion[region];\n        }\n\n        // store away the content block so we can find it during lookup\n        // which happens in the yield function.\n        contentBlocksByRegion[region] = self.__content;\n\n        // this will just set the region to itself but when the lookupTemplate\n        // function searches it will check contentBlocksByRegion first, so we'll\n        // find the content block there.\n        layout.setRegion(region, region);\n\n        // don't render anything for now. let the yield template control this.\n        return null;\n      }\n    });\n\n    this._defaultLayout = function () {\n      return UI.block(function () {\n        return lookupTemplate.call(layout, 'yield');\n      });\n    };\n  },\n\n  render: function () {\n    var self = this;\n    // return a function to create a reactive\n    // computation. so if the template changes\n    // the layout is re-endered.\n    return function () {\n      // reactive\n      var tmplName = self.template();\n\n      //XXX hack to make work with null/false values.\n      //see this.template = in ctor function.\n      if (tmplName === '_defaultLayout')\n        return self._defaultLayout;\n      else if (tmplName) {\n        var tmpl = lookupTemplate.call(self, tmplName);\n        // it's a component\n        if (typeof tmpl.instantiate === 'function')\n          // See how __pasthrough is used in overrides.js\n          // findComponentWithHelper. If __passthrough is true\n          // then we'll continue past this component in looking\n          // up a helper method. This allows this use case:\n          // <template name=\"SomeParent\">\n          //  {{#Layout template=\"SomeLayout\"}}\n          //    I want a helper method on SomeParent\n          //    called {{someHelperMethod}}\n          //  {{/Layout}}\n          // </template>\n          tmpl.__passthrough = true;\n        return tmpl;\n      }\n      else {\n        return self['yield'];\n      }\n    };\n  }\n});\n\n/**\n * Put Layout into the template lookup chain so\n * we can do this:\n * {{#Layout template=\"MyLayout\"}}\n *  Some content\n * {{/Layout}}\n */\nTemplate.Layout = Layout;\n\nBlazeUIManager = function (router) {\n  var self = this;\n  this.router = router;\n  this._component = null;\n\n  _.each([\n    'setRegion',\n    'clearRegion',\n    'getRegionKeys',\n    'getData',\n    'setData'\n  ], function (method) {\n    self[method] = function () {\n      if (self._component) {\n        return self._component[method].apply(this, arguments);\n      }\n    };\n  });\n\n  // proxy the \"layout\" method to the underlying component's\n  // \"template\" method.\n  self.layout = function () {\n    if (self._component)\n      return self._component.template.apply(self, arguments);\n    else\n      throw new Error('Layout has not been rendered yet');\n  };\n};\n\nBlazeUIManager.prototype = {\n  render: function (props, parentComponent) {\n    this._component = UI.render(Layout.extend(props || {}), parentComponent || UI.body);\n    return this._component;\n  },\n\n  insert: function (parentDom, parentComponent, props) {\n    UI.DomRange.insert(this.render(props, parentComponent).dom, parentDom || document.body);\n  }\n};\n","// some temporary overrides of blaze which hopefully will be resolved in core soon.\n\nfindComponentWithProp = function (id, comp) {\n  while (comp) {\n    if (typeof comp[id] !== 'undefined')\n      return comp;\n    comp = comp.parent;\n  }\n  return null;\n};\n\ngetComponentData = function (comp) {\n  comp = findComponentWithProp('data', comp);\n  return (comp ?\n          (typeof comp.data === 'function' ?\n           comp.data() : comp.data) :\n          null);\n};\n\nvar findComponentOfKind = function (kind, comp) {\n  while (comp) {\n    if (comp.kind === kind)\n      return comp;\n    comp = comp.parent;\n  }\n  return null;\n};\n\n// added a '__passthrough' property that allows helpers through\nfindComponentWithHelper = function (id, comp) {\n  while (comp) {\n    if (comp.__helperHost) {\n      if (typeof comp[id] !== 'undefined')\n        return comp;\n\n      // if __pasthrough == true on the component we will continue\n      // looking up the parent chain to find a component with the\n      // property of <id>. Otherwise just halt right now and return null.\n      else if (! comp.__passthrough)\n        return null;\n    }\n    comp = comp.parent;\n  }\n  return null;\n};\n\n// Override {{> yield}} and {{#contentFor}} to find the closest\n// enclosing layout\nvar origLookup = UI.Component.lookup;\nUI.Component.lookup = function (id, opts) {\n  var self = this;\n  var comp, result;\n  \n  if (id === 'yield') {\n    throw new Error(\"Sorry, would you mind using {{> yield}} instead of {{yield}}? It helps the Blaze engine.\");\n  } else if (id === 'contentFor') {\n    var layout = findComponentOfKind('Layout', this);\n    if (!layout)\n      throw new Error(\"Couldn't find a Layout component in the rendered component tree\");\n    else {\n      result = layout[id];\n    }\n\n  // found a property or method of a component\n  // (`self` or one of its ancestors)\n  } else if (! /^\\./.test(id) && (comp = findComponentWithHelper(id, self))) {\n    result = comp[id];\n    \n  } else {\n    return origLookup.apply(this, arguments);\n  }\n  \n  if (typeof result === 'function' && ! result._isEmboxedConstant) {\n    // Wrap the function `result`, binding `this` to `getComponentData(self)`.\n    // This creates a dependency when the result function is called.\n    // Don't do this if the function is really just an emboxed constant.\n    return function (/*arguments*/) {\n      var data = getComponentData(self);\n      return result.apply(data === null ? {} : data, arguments);\n    };\n  } else {\n    return result;\n  };\n};\n\nvar origLookupTemplate = UI.Component.lookupTemplate;\nUI.Component.lookupTemplate = function (id, opts) {\n  if (id === 'yield') {\n    var layout = findComponentOfKind('Layout', this);\n    if (!layout)\n      throw new Error(\"Couldn't find a Layout component in the rendered component tree\");\n    else {\n      return layout[id];\n    }\n  } else {\n    return origLookupTemplate.apply(this, arguments);\n  }\n};\n\nif (Package['iron-router']) {\n  Package['iron-router'].Router.configure({\n    uiManager: new BlazeUIManager\n  });\n}\n"]}